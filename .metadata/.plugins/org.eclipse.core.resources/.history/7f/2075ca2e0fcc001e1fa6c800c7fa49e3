/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "AppInterface.h"
#include "Macro.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
const float RAD_TO_DEG = 57.295779513;
#define Square(x)	x*x

// Direction Pin and Step Pin for Left Motor
#define DIR_PIN_LEFT	GPIO_PIN_1	// PA1
#define DIR_PORT_LEFT	GPIOA
#define STEP_PIN_LEFT	GPIO_PIN_2	// PA2
#define STEP_PORT_LEFT	GPIOA

// Direction Pin and Step Pin for Right Motor
#define DIR_PIN_RIGHT	GPIO_PIN_3	// PA3
#define DIR_PORT_RIGHT	GPIOA
#define STEP_PIN_RIGHT	GPIO_PIN_4	// PA4
#define STEP_PORT_RIGHT	GPIOA
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
/* Module Bluetooth HC05 */
UINT8 u8RxData;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void AOSpeedMotorLeft(INT16 Param);
void AOSpeedMotorRight(INT16 Param);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*
 * DIR:
 * 		. DIR != 0: Enable control motor
 * 			. DIR > 0: clockwise
 * 			. DIR < 0: anti-clockwise
 * 		. DIR == 0: Not control motor
 */
INT8 n8DirLeft = 0;
INT8 n8DirRight = 0;

volatile UINT8 u8Counter20usLeft = 0;
volatile UINT8 u8Counter20usRight = 0;

// Total number of cumulative pulses in the timer interrupt program
volatile INT32 n32StepLeft = 0;
volatile INT32 n32StepRight = 0;

INT16 n16CounterTopLeft = 0;
INT16 n16CounterBotLeft = 0;
INT16 n16CounterTopRight = 0;
INT16 n16CounterBotRight = 0;

MPU6050_Data* ptrMPU6050Data;
FLOAT fRoll = 0;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Start Timer 2, When the timer overflows, an interrupt will be performed.
  HAL_UART_Receive_IT(&huart1, &u8RxData, 1); // Enabling interrupt receive
  // Init MPU6050
  AppControl_MPU6050_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

#if DEBUG_NEMA17
	  AOSpeedMotorLeft(100);
#endif

#if DEBUG_MPU6050
	  AppControl_MPU6050ReadData();
	  ptrMPU6050Data = AppControl_MPU6050GetData();
	  fRoll = RAD_TO_DEG * (atan((ptrMPU6050Data->fAccel_Y)/(sqrt(Square(ptrMPU6050Data->fAccel_X) + Square(ptrMPU6050Data->fAccel_Z)))));
#endif

#if DEBUG_JUSTBALANCE
	  AppControl_MPU6050ReadData();
	  ptrMPU6050Data = AppControl_MPU6050GetData();
	  fRoll = RAD_TO_DEG * (atan((ptrMPU6050Data->fAccel_Y)/(sqrt(Square(ptrMPU6050Data->fAccel_X) + Square(ptrMPU6050Data->fAccel_Z)))));
#endif
	  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
 	  //AOSpeedMotorLeft(100);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 19;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/*
 * This function is called every 2us
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == htim2.Instance)
	{
		if (n8DirLeft != 0)
		{
			u8Counter20usLeft++;
			if (u8Counter20usLeft <= n16CounterTopLeft)
			{
				// Set Step pin = HIGH
				HAL_GPIO_WritePin(STEP_PORT_LEFT, STEP_PIN_LEFT, GPIO_PIN_SET);
			}
			else
			{
				// Set Step pin = LOW
				HAL_GPIO_WritePin(STEP_PORT_LEFT, STEP_PIN_LEFT, GPIO_PIN_RESET);
			}

			if (u8Counter20usLeft > n16CounterBotLeft)
			{
				u8Counter20usLeft = 0;
				if (n8DirLeft > 0)
				{
					n32StepLeft++;
				}
				else if (n8DirLeft < 0)
				{
					n32StepLeft--;
				}
			}
		}

		if (n8DirRight != 0)
		{
			u8Counter20usRight++;
			if (u8Counter20usRight <= n16CounterTopRight)
			{
				// Set Step pin = HIGH
				HAL_GPIO_WritePin(STEP_PORT_RIGHT, STEP_PIN_RIGHT, GPIO_PIN_SET);
			}
			else
			{
				// Set Step pin = LOW
				HAL_GPIO_WritePin(STEP_PORT_RIGHT, STEP_PIN_RIGHT, GPIO_PIN_RESET);
			}

			if (u8Counter20usRight > n16CounterBotRight)
			{
				u8Counter20usRight = 0;
				if (n8DirRight > 0)
				{
					n32StepRight++;
				}
				else if (n8DirRight < 0)
				{
					n32StepRight--;
				}
			}
		}
	}
}

/*
 * @author: NGO KIEN HOANG
 * @email: hoang.ngo000187@gmail.com
 *
 * This function AOSpeedMotorLeft and AOSpeedMotorRight is to control the speed of each motor
 */
void AOSpeedMotorLeft(INT16 Param)
{
	/*
	 * Param = large value --> Speed up
	 * Param = small value --> Low down
	 * Param = 0 --> Stop
	 */
	n16CounterBotLeft = abs(Param);
	n16CounterTopLeft = abs(Param)/2;
	if (Param < 0)
	{
		HAL_GPIO_WritePin(DIR_PORT_LEFT, DIR_PIN_LEFT, GPIO_PIN_RESET); // Set Dir pin left --> LOW
		n8DirLeft = -1; // anti-clockwise
	}
	else if (Param > 0)
	{
		HAL_GPIO_WritePin(DIR_PORT_LEFT, DIR_PIN_LEFT, GPIO_PIN_SET); // Set Dir pin left --> HIGH
		n8DirLeft = 1; // clockwise
	}
	else
	{
		n8DirLeft = 0; // Stop motor
	}
}

void AOSpeedMotorRight(INT16 Param)
{
	/*
	 * Param = large value --> Speed up
	 * Param = small value --> Low down
	 * Param = 0 --> Stop
	 */
	n16CounterBotRight = abs(Param);
	n16CounterTopRight = abs(Param)/2;

	if (Param < 0)
	{
		HAL_GPIO_WritePin(DIR_PORT_RIGHT, DIR_PIN_RIGHT, GPIO_PIN_RESET); // Set Dir pin left --> LOW
		n8DirRight = -1; // anti-clockwise
	}
	else if (Param > 0)
	{
		HAL_GPIO_WritePin(DIR_PORT_RIGHT, DIR_PIN_RIGHT, GPIO_PIN_SET); // Set Dir pin left --> HIGH
		n8DirRight = 1; // clockwise
	}
	else
	{
		n8DirRight = 0; // Stop motor
	}
}

/*
 *	Get function for hi2c1
 */
I2C_HandleTypeDef* AppGet_hi2c1(void)
{
	return &hi2c1;
}

/* UART1 Interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if(huart->Instance==USART1)
  {
    if(u8RxData==78) // Ascii value of 'N' is 78 (N for NO)
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
    }
    else if (u8RxData==89) // Ascii value of 'Y' is 89 (Y for YES)
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
    }
    HAL_UART_Receive_IT(&huart1,&u8RxData,1); // Enabling interrupt receive again
  }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
