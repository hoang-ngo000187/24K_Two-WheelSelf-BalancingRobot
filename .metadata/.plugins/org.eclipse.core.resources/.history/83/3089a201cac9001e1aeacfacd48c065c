/****************************************************************************************************************************

 * @author: Ngo Kien Hoang
 * @email: hoang.ngo000187@gmail.com
 *
 * This file contains the library for communicating with MPU6050 sensor.

 ****************************************************************************************************************************/

/****************************************************************************************************************************
 * INCLUDE
 ****************************************************************************************************************************/
#include "AppInterface.h"

MPU6050_RawData sMPU6050RawData;
MPU6050_RawData sMPU6050Data;
//--------------------------
INT16 Accel_X_RAW = 0;
INT16 Accel_Y_RAW = 0; 
INT16 Accel_Z_RAW = 0;

INT16 Gyro_X_RAW = 0;
INT16 Gyro_Y_RAW = 0; 
INT16 Gyro_Z_RAW = 0;

FLOAT fAccel_X = 0;
FLOAT fAccel_Y = 0;
FLOAT fAccel_Z = 0;

FLOAT fGyro_X = 0;
FLOAT fGyro_Y = 0; 
FLOAT fGyro_Z = 0;

/* Get Accelerometer RAW value*/
INT16 AppControl_Get_Accel_X_RAW(void)
{
	UINT8 u8Rec_Data[2];
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();

	// Read 2 bytes of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, u8Rec_Data, 2, 1000);

	Accel_X_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);

	return Accel_X_RAW;
}

INT16 AppControl_Get_Accel_Y_RAW(void)
{
	UINT8 u8Rec_Data[2];
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();

	// Read 2 bytes of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, ACCEL_YOUT_H_REG, 1, u8Rec_Data, 2, 1000);

	Accel_Y_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);

	return Accel_Y_RAW;
}

INT16 AppControl_Get_Accel_Z_RAW(void)
{
	UINT8 u8Rec_Data[2];
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();

	// Read 2 bytes of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, ACCEL_ZOUT_H_REG, 1, u8Rec_Data, 2, 1000);

	Accel_Z_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);

	return Accel_Z_RAW;
}

/* Get Gyroscope RAW value*/
INT16 AppControl_Get_Gyro_X_RAW(void)
{
	UINT8 u8Rec_Data[2];
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
	// Read 6 bytes of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, u8Rec_Data, 2, 1000);

	Gyro_X_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);

	return Gyro_X_RAW;
}

INT16 AppControl_Get_Gyro_Y_RAW(void)
{
	UINT8 u8Rec_Data[2];
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
	// Read 6 bytes of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, GYRO_YOUT_H_REG, 1, u8Rec_Data, 2, 1000);

	Gyro_Y_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);

	return Gyro_Y_RAW;
}

INT16 AppControl_Get_Gyro_Z_RAW(void)
{
	UINT8 u8Rec_Data[2];
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
	// Read 6 bytes of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, GYRO_ZOUT_H_REG, 1, u8Rec_Data, 2, 1000);

	Gyro_Z_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);

	return Gyro_Z_RAW;
}

/* Get Accelerometer SCALE value*/
FLOAT AppControl_Get_Accel_X(void)
{
	fAccel_X = AppControl_Get_Accel_X_RAW()/16384.0;
	return fAccel_X;
}

FLOAT AppControl_Get_Accel_Y(void)
{
	fAccel_Y = AppControl_Get_Accel_Y_RAW()/16384.0;
	return fAccel_Y;
}

FLOAT AppControl_Get_Accel_Z(void)
{
	fAccel_Z = AppControl_Get_Accel_Z_RAW()/16384.0;
	return fAccel_Z;
}

/* Get Gyroscope SCALE value*/
FLOAT AppControl_Get_Gyro_X(void)
{
	fGyro_X = AppControl_Get_Gyro_X_RAW()/131.0;
	return fGyro_X;
}

FLOAT AppControl_Get_Gyro_Y(void)
{
	fGyro_Y = AppControl_Get_Gyro_Y_RAW()/131.0;
	return fGyro_Y;
}

FLOAT AppControl_Get_Gyro_Z(void)
{
	fGyro_Z = AppControl_Get_Gyro_Z_RAW()/131.0;
	return fGyro_Z;
}

void AppControl_MPU6050_Init(void)
{
	UINT8 u8Check, u8Data;
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();

	/* 01 - Check if the sensor is responding or not */
	HAL_I2C_Mem_Read (ptr_hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &u8Check, 1, 1000);

	if (104 == u8Check) // the sensor is present
	{
		/* 02 - Write all bit 0 to Power management register (Addr: 0x6B) to wake the sensor up */
		u8Data = 0;
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &u8Data, 1, 1000);

		/* 03 - Set DATA RATE = 1KHz by writing to SMPLRT_DIV register */
		u8Data = 7;
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, SMPRT_DIV_REG, 1, &u8Data, 1, 1000);

		/* 04 - Set the Full scale range of ± 2g in ACCEL_CONFIGRegister and a Full scale range of ± 250 °/s in GYRO_CONFIG*/
		u8Data = 0;
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &u8Data, 1, 1000);
		u8Data = 0;
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &u8Data, 1, 1000);
	}
}

void AppControl_MPU6050_Read_Accel(void)
{
	UINT8 u8Rec_Data[6];
	
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
	// Read 6 bytes of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, u8Rec_Data, 6, 1000);

	Accel_X_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);
	Accel_Y_RAW = (INT16)(u8Rec_Data[2] << 8 | u8Rec_Data[3]);
	Accel_Z_RAW = (INT16)(u8Rec_Data[4] << 8 | u8Rec_Data[5]);

	fAccel_X = Accel_X_RAW/16384.0;
	fAccel_Y = Accel_Y_RAW/16384.0;
	fAccel_Z = Accel_Z_RAW/16384.0;
}

void AppControl_MPU6050_Read_Gyro(void)
{
	UINT8 u8Rec_Data[6];
	
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
	// Read 6 bytes of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, u8Rec_Data, 6, 1000);

	Gyro_X_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);
	Gyro_Y_RAW = (INT16)(u8Rec_Data[2] << 8 | u8Rec_Data[3]);
	Gyro_Z_RAW = (INT16)(u8Rec_Data[4] << 8 | u8Rec_Data[5]);

	fGyro_X = Gyro_X_RAW/131.0;
	fGyro_Y = Gyro_Y_RAW/131.0;
	fGyro_Z = Gyro_Z_RAW/131.0;
}
