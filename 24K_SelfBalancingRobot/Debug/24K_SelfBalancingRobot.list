
24K_SelfBalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005124  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005238  08005238  00015238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a8  080052a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080052a8  080052a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052a8  080052a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08005320  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005320  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f39b  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002021  00000000  00000000  0002f477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00031498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c36  00000000  00000000  000323f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001822e  00000000  00000000  0003302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cfd  00000000  00000000  0004b25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ce20  00000000  00000000  0005cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000460c  00000000  00000000  000e9d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ee388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800521c 	.word	0x0800521c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800521c 	.word	0x0800521c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2f>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b98:	bf24      	itt	cs
 8000b9a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_d2f+0x30>
 8000ba4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb8:	bf08      	it	eq
 8000bba:	f020 0001 	biceq.w	r0, r0, #1
 8000bbe:	4770      	bx	lr
 8000bc0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc4:	d121      	bne.n	8000c0a <__aeabi_d2f+0x7a>
 8000bc6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bca:	bfbc      	itt	lt
 8000bcc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	4770      	bxlt	lr
 8000bd2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bda:	f1c2 0218 	rsb	r2, r2, #24
 8000bde:	f1c2 0c20 	rsb	ip, r2, #32
 8000be2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bea:	bf18      	it	ne
 8000bec:	f040 0001 	orrne.w	r0, r0, #1
 8000bf0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bfc:	ea40 000c 	orr.w	r0, r0, ip
 8000c00:	fa23 f302 	lsr.w	r3, r3, r2
 8000c04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c08:	e7cc      	b.n	8000ba4 <__aeabi_d2f+0x14>
 8000c0a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0e:	d107      	bne.n	8000c20 <__aeabi_d2f+0x90>
 8000c10:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c14:	bf1e      	ittt	ne
 8000c16:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c1a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1e:	4770      	bxne	lr
 8000c20:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__aeabi_frsub>:
 8000c30:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	e002      	b.n	8000c3c <__addsf3>
 8000c36:	bf00      	nop

08000c38 <__aeabi_fsub>:
 8000c38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c3c <__addsf3>:
 8000c3c:	0042      	lsls	r2, r0, #1
 8000c3e:	bf1f      	itttt	ne
 8000c40:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c44:	ea92 0f03 	teqne	r2, r3
 8000c48:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c4c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c50:	d06a      	beq.n	8000d28 <__addsf3+0xec>
 8000c52:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c56:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c5a:	bfc1      	itttt	gt
 8000c5c:	18d2      	addgt	r2, r2, r3
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	4048      	eorgt	r0, r1
 8000c62:	4041      	eorgt	r1, r0
 8000c64:	bfb8      	it	lt
 8000c66:	425b      	neglt	r3, r3
 8000c68:	2b19      	cmp	r3, #25
 8000c6a:	bf88      	it	hi
 8000c6c:	4770      	bxhi	lr
 8000c6e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c82:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4249      	negne	r1, r1
 8000c8e:	ea92 0f03 	teq	r2, r3
 8000c92:	d03f      	beq.n	8000d14 <__addsf3+0xd8>
 8000c94:	f1a2 0201 	sub.w	r2, r2, #1
 8000c98:	fa41 fc03 	asr.w	ip, r1, r3
 8000c9c:	eb10 000c 	adds.w	r0, r0, ip
 8000ca0:	f1c3 0320 	rsb	r3, r3, #32
 8000ca4:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__addsf3+0x78>
 8000cae:	4249      	negs	r1, r1
 8000cb0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb8:	d313      	bcc.n	8000ce2 <__addsf3+0xa6>
 8000cba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cbe:	d306      	bcc.n	8000cce <__addsf3+0x92>
 8000cc0:	0840      	lsrs	r0, r0, #1
 8000cc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc6:	f102 0201 	add.w	r2, r2, #1
 8000cca:	2afe      	cmp	r2, #254	; 0xfe
 8000ccc:	d251      	bcs.n	8000d72 <__addsf3+0x136>
 8000cce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd6:	bf08      	it	eq
 8000cd8:	f020 0001 	biceq.w	r0, r0, #1
 8000cdc:	ea40 0003 	orr.w	r0, r0, r3
 8000ce0:	4770      	bx	lr
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	eb40 0000 	adc.w	r0, r0, r0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	bf28      	it	cs
 8000cec:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf0:	d2ed      	bcs.n	8000cce <__addsf3+0x92>
 8000cf2:	fab0 fc80 	clz	ip, r0
 8000cf6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cfa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d02:	bfaa      	itet	ge
 8000d04:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d08:	4252      	neglt	r2, r2
 8000d0a:	4318      	orrge	r0, r3
 8000d0c:	bfbc      	itt	lt
 8000d0e:	40d0      	lsrlt	r0, r2
 8000d10:	4318      	orrlt	r0, r3
 8000d12:	4770      	bx	lr
 8000d14:	f092 0f00 	teq	r2, #0
 8000d18:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d1c:	bf06      	itte	eq
 8000d1e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d22:	3201      	addeq	r2, #1
 8000d24:	3b01      	subne	r3, #1
 8000d26:	e7b5      	b.n	8000c94 <__addsf3+0x58>
 8000d28:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d2c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d30:	bf18      	it	ne
 8000d32:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d36:	d021      	beq.n	8000d7c <__addsf3+0x140>
 8000d38:	ea92 0f03 	teq	r2, r3
 8000d3c:	d004      	beq.n	8000d48 <__addsf3+0x10c>
 8000d3e:	f092 0f00 	teq	r2, #0
 8000d42:	bf08      	it	eq
 8000d44:	4608      	moveq	r0, r1
 8000d46:	4770      	bx	lr
 8000d48:	ea90 0f01 	teq	r0, r1
 8000d4c:	bf1c      	itt	ne
 8000d4e:	2000      	movne	r0, #0
 8000d50:	4770      	bxne	lr
 8000d52:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d56:	d104      	bne.n	8000d62 <__addsf3+0x126>
 8000d58:	0040      	lsls	r0, r0, #1
 8000d5a:	bf28      	it	cs
 8000d5c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d66:	bf3c      	itt	cc
 8000d68:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d6c:	4770      	bxcc	lr
 8000d6e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d72:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7a:	4770      	bx	lr
 8000d7c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d80:	bf16      	itet	ne
 8000d82:	4608      	movne	r0, r1
 8000d84:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d88:	4601      	movne	r1, r0
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	bf06      	itte	eq
 8000d8e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d92:	ea90 0f01 	teqeq	r0, r1
 8000d96:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_ui2f>:
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e004      	b.n	8000dac <__aeabi_i2f+0x8>
 8000da2:	bf00      	nop

08000da4 <__aeabi_i2f>:
 8000da4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da8:	bf48      	it	mi
 8000daa:	4240      	negmi	r0, r0
 8000dac:	ea5f 0c00 	movs.w	ip, r0
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db8:	4601      	mov	r1, r0
 8000dba:	f04f 0000 	mov.w	r0, #0
 8000dbe:	e01c      	b.n	8000dfa <__aeabi_l2f+0x2a>

08000dc0 <__aeabi_ul2f>:
 8000dc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc4:	bf08      	it	eq
 8000dc6:	4770      	bxeq	lr
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e00a      	b.n	8000de4 <__aeabi_l2f+0x14>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_l2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ddc:	d502      	bpl.n	8000de4 <__aeabi_l2f+0x14>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	ea5f 0c01 	movs.w	ip, r1
 8000de8:	bf02      	ittt	eq
 8000dea:	4684      	moveq	ip, r0
 8000dec:	4601      	moveq	r1, r0
 8000dee:	2000      	moveq	r0, #0
 8000df0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df4:	bf08      	it	eq
 8000df6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfe:	fabc f28c 	clz	r2, ip
 8000e02:	3a08      	subs	r2, #8
 8000e04:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e08:	db10      	blt.n	8000e2c <__aeabi_l2f+0x5c>
 8000e0a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0e:	4463      	add	r3, ip
 8000e10:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e14:	f1c2 0220 	rsb	r2, r2, #32
 8000e18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e20:	eb43 0002 	adc.w	r0, r3, r2
 8000e24:	bf08      	it	eq
 8000e26:	f020 0001 	biceq.w	r0, r0, #1
 8000e2a:	4770      	bx	lr
 8000e2c:	f102 0220 	add.w	r2, r2, #32
 8000e30:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e3c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4a:	4770      	bx	lr

08000e4c <AppControl_MPU6050_Init>:
	fGyro_Z = AppControl_Get_Gyro_Z_RAW()/131.0;
	return fGyro_Z;
}

void AppControl_MPU6050_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af04      	add	r7, sp, #16
	UINT8 u8Check, u8Data;
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
 8000e52:	f000 fbeb 	bl	800162c <AppGet_hi2c1>
 8000e56:	6078      	str	r0, [r7, #4]

	/* 01 - Check if the sensor is responding or not */
	HAL_I2C_Mem_Read (ptr_hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &u8Check, 1, 1000);
 8000e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	1cfb      	adds	r3, r7, #3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	2275      	movs	r2, #117	; 0x75
 8000e6a:	21d0      	movs	r1, #208	; 0xd0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f001 fb67 	bl	8002540 <HAL_I2C_Mem_Read>

	if (104 == u8Check) // the sensor is present
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	2b68      	cmp	r3, #104	; 0x68
 8000e76:	d13b      	bne.n	8000ef0 <AppControl_MPU6050_Init+0xa4>
	{
		/* 02 - Write all bit 0 to Power management register (Addr: 0x6B) to wake the sensor up */
		u8Data = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &u8Data, 1, 1000);
 8000e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e80:	9302      	str	r3, [sp, #8]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	1cbb      	adds	r3, r7, #2
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	226b      	movs	r2, #107	; 0x6b
 8000e8e:	21d0      	movs	r1, #208	; 0xd0
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f001 fa5b 	bl	800234c <HAL_I2C_Mem_Write>

		/* 03 - Set DATA RATE = 1KHz by writing to SMPLRT_DIV register */
		u8Data = 7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, SMPRT_DIV_REG, 1, &u8Data, 1, 1000);
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	1cbb      	adds	r3, r7, #2
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2219      	movs	r2, #25
 8000eac:	21d0      	movs	r1, #208	; 0xd0
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f001 fa4c 	bl	800234c <HAL_I2C_Mem_Write>

		/* 04 - Set the Full scale range of ± 2g in ACCEL_CONFIGRegister and a Full scale range of ± 250 °/s in GYRO_CONFIG*/
		u8Data = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &u8Data, 1, 1000);
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	1cbb      	adds	r3, r7, #2
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	221b      	movs	r2, #27
 8000eca:	21d0      	movs	r1, #208	; 0xd0
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f001 fa3d 	bl	800234c <HAL_I2C_Mem_Write>
		u8Data = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	70bb      	strb	r3, [r7, #2]
		HAL_I2C_Mem_Write(ptr_hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &u8Data, 1, 1000);
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	221c      	movs	r2, #28
 8000ee8:	21d0      	movs	r1, #208	; 0xd0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 fa2e 	bl	800234c <HAL_I2C_Mem_Write>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <AppControl_MPU6050_Read_Accel>:

void AppControl_MPU6050_Read_Accel(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af04      	add	r7, sp, #16
	UINT8 u8Rec_Data[6];
	
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
 8000efe:	f000 fb95 	bl	800162c <AppGet_hi2c1>
 8000f02:	60f8      	str	r0, [r7, #12]
	// Read 6 bytes of data starting from ACCEL_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, u8Rec_Data, 6, 1000);
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	223b      	movs	r2, #59	; 0x3b
 8000f16:	21d0      	movs	r1, #208	; 0xd0
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f001 fb11 	bl	8002540 <HAL_I2C_Mem_Read>

	sMPU6050RawData.nAccel_X_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <AppControl_MPU6050_Read_Accel+0xdc>)
 8000f2e:	801a      	strh	r2, [r3, #0]
	sMPU6050RawData.nAccel_Y_RAW = (INT16)(u8Rec_Data[2] << 8 | u8Rec_Data[3]);
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	021b      	lsls	r3, r3, #8
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <AppControl_MPU6050_Read_Accel+0xdc>)
 8000f40:	805a      	strh	r2, [r3, #2]
	sMPU6050RawData.nAccel_Z_RAW = (INT16)(u8Rec_Data[4] << 8 | u8Rec_Data[5]);
 8000f42:	7a3b      	ldrb	r3, [r7, #8]
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	7a7b      	ldrb	r3, [r7, #9]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <AppControl_MPU6050_Read_Accel+0xdc>)
 8000f52:	809a      	strh	r2, [r3, #4]

	sMPU6050Data.fAccel_X = sMPU6050RawData.nAccel_X_RAW/16384.0;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <AppControl_MPU6050_Read_Accel+0xdc>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fafe 	bl	800055c <__aeabi_i2d>
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <AppControl_MPU6050_Read_Accel+0xe0>)
 8000f66:	f7ff fc8d 	bl	8000884 <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fe0d 	bl	8000b90 <__aeabi_d2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <AppControl_MPU6050_Read_Accel+0xe4>)
 8000f7a:	6013      	str	r3, [r2, #0]
	sMPU6050Data.fAccel_Y = sMPU6050RawData.nAccel_Y_RAW/16384.0;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <AppControl_MPU6050_Read_Accel+0xdc>)
 8000f7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faea 	bl	800055c <__aeabi_i2d>
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <AppControl_MPU6050_Read_Accel+0xe0>)
 8000f8e:	f7ff fc79 	bl	8000884 <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fdf9 	bl	8000b90 <__aeabi_d2f>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <AppControl_MPU6050_Read_Accel+0xe4>)
 8000fa2:	6053      	str	r3, [r2, #4]
	sMPU6050Data.fAccel_Z = sMPU6050RawData.nAccel_Z_RAW/16384.0;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <AppControl_MPU6050_Read_Accel+0xdc>)
 8000fa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fad6 	bl	800055c <__aeabi_i2d>
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <AppControl_MPU6050_Read_Accel+0xe0>)
 8000fb6:	f7ff fc65 	bl	8000884 <__aeabi_ddiv>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fde5 	bl	8000b90 <__aeabi_d2f>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <AppControl_MPU6050_Read_Accel+0xe4>)
 8000fca:	6093      	str	r3, [r2, #8]
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000008c 	.word	0x2000008c
 8000fd8:	40d00000 	.word	0x40d00000
 8000fdc:	20000098 	.word	0x20000098

08000fe0 <AppControl_MPU6050_Read_Gyro>:

void AppControl_MPU6050_Read_Gyro(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af04      	add	r7, sp, #16
	UINT8 u8Rec_Data[6];
	
	I2C_HandleTypeDef* ptr_hi2c = AppGet_hi2c1();
 8000fe6:	f000 fb21 	bl	800162c <AppGet_hi2c1>
 8000fea:	60f8      	str	r0, [r7, #12]
	// Read 6 bytes of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read(ptr_hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, u8Rec_Data, 6, 1000);
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2243      	movs	r2, #67	; 0x43
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f001 fa9d 	bl	8002540 <HAL_I2C_Mem_Read>

	sMPU6050RawData.nGyro_X_RAW = (INT16)(u8Rec_Data[0] << 8 | u8Rec_Data[1]);
 8001006:	793b      	ldrb	r3, [r7, #4]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	b21b      	sxth	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <AppControl_MPU6050_Read_Gyro+0xdc>)
 8001016:	80da      	strh	r2, [r3, #6]
	sMPU6050RawData.nGyro_Y_RAW = (INT16)(u8Rec_Data[2] << 8 | u8Rec_Data[3]);
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <AppControl_MPU6050_Read_Gyro+0xdc>)
 8001028:	811a      	strh	r2, [r3, #8]
	sMPU6050RawData.nGyro_Z_RAW = (INT16)(u8Rec_Data[4] << 8 | u8Rec_Data[5]);
 800102a:	7a3b      	ldrb	r3, [r7, #8]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	7a7b      	ldrb	r3, [r7, #9]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <AppControl_MPU6050_Read_Gyro+0xdc>)
 800103a:	815a      	strh	r2, [r3, #10]

	sMPU6050Data.fGyro_X = sMPU6050RawData.nGyro_X_RAW/16384.0;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <AppControl_MPU6050_Read_Gyro+0xdc>)
 800103e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa8a 	bl	800055c <__aeabi_i2d>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <AppControl_MPU6050_Read_Gyro+0xe0>)
 800104e:	f7ff fc19 	bl	8000884 <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd99 	bl	8000b90 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <AppControl_MPU6050_Read_Gyro+0xe4>)
 8001062:	60d3      	str	r3, [r2, #12]
	sMPU6050Data.fGyro_Y = sMPU6050RawData.nGyro_Y_RAW/16384.0;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <AppControl_MPU6050_Read_Gyro+0xdc>)
 8001066:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa76 	bl	800055c <__aeabi_i2d>
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <AppControl_MPU6050_Read_Gyro+0xe0>)
 8001076:	f7ff fc05 	bl	8000884 <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fd85 	bl	8000b90 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <AppControl_MPU6050_Read_Gyro+0xe4>)
 800108a:	6113      	str	r3, [r2, #16]
	sMPU6050Data.fGyro_Z = sMPU6050RawData.nGyro_Z_RAW/16384.0;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <AppControl_MPU6050_Read_Gyro+0xdc>)
 800108e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fa62 	bl	800055c <__aeabi_i2d>
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <AppControl_MPU6050_Read_Gyro+0xe0>)
 800109e:	f7ff fbf1 	bl	8000884 <__aeabi_ddiv>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4610      	mov	r0, r2
 80010a8:	4619      	mov	r1, r3
 80010aa:	f7ff fd71 	bl	8000b90 <__aeabi_d2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <AppControl_MPU6050_Read_Gyro+0xe4>)
 80010b2:	6153      	str	r3, [r2, #20]
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000008c 	.word	0x2000008c
 80010c0:	40d00000 	.word	0x40d00000
 80010c4:	20000098 	.word	0x20000098

080010c8 <AppControl_MPU6050ReadData>:

void AppControl_MPU6050ReadData()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	AppControl_MPU6050_Read_Accel();
 80010cc:	f7ff ff14 	bl	8000ef8 <AppControl_MPU6050_Read_Accel>
	AppControl_MPU6050_Read_Gyro();
 80010d0:	f7ff ff86 	bl	8000fe0 <AppControl_MPU6050_Read_Gyro>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <AppControl_MPU6050GetData>:
{
	return &sMPU6050RawData;
}

MPU6050_Data* AppControl_MPU6050GetData()
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	return &sMPU6050Data;
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <AppControl_MPU6050GetData+0x10>)
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000098 	.word	0x20000098

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f2:	f000 fc29 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f6:	f000 f877 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fa:	f000 f95f 	bl	80013bc <MX_GPIO_Init>
  MX_TIM2_Init();
 80010fe:	f000 f8e7 	bl	80012d0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001102:	f000 f8b7 	bl	8001274 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001106:	f000 f92f 	bl	8001368 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Start Timer 2, When the timer overflows, an interrupt will be performed.
 800110a:	4831      	ldr	r0, [pc, #196]	; (80011d0 <main+0xe4>)
 800110c:	f002 fc94 	bl	8003a38 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &u8RxData, 1); // Enabling interrupt receive
 8001110:	2201      	movs	r2, #1
 8001112:	4930      	ldr	r1, [pc, #192]	; (80011d4 <main+0xe8>)
 8001114:	4830      	ldr	r0, [pc, #192]	; (80011d8 <main+0xec>)
 8001116:	f003 f88d 	bl	8004234 <HAL_UART_Receive_IT>
  // Init MPU6050
  AppControl_MPU6050_Init();
 800111a:	f7ff fe97 	bl	8000e4c <AppControl_MPU6050_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

#if DEBUG_NEMA17
	  AOSpeedMotorLeft(100);
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f000 fa40 	bl	80015a4 <AOSpeedMotorLeft>
#endif

#if DEBUG_MPU6050
	  AppControl_MPU6050ReadData();
 8001124:	f7ff ffd0 	bl	80010c8 <AppControl_MPU6050ReadData>
	  ptrMPU6050Data = AppControl_MPU6050GetData();
 8001128:	f7ff ffd6 	bl	80010d8 <AppControl_MPU6050GetData>
 800112c:	4603      	mov	r3, r0
 800112e:	4a2b      	ldr	r2, [pc, #172]	; (80011dc <main+0xf0>)
 8001130:	6013      	str	r3, [r2, #0]
	  fRoll = RAD_TO_DEG * (atan((ptrMPU6050Data->fAccel_Y)/(sqrt(Square(ptrMPU6050Data->fAccel_X) + Square(ptrMPU6050Data->fAccel_Z)))));
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <main+0xf4>)
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa23 	bl	8000580 <__aeabi_f2d>
 800113a:	4604      	mov	r4, r0
 800113c:	460d      	mov	r5, r1
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <main+0xf0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fa1b 	bl	8000580 <__aeabi_f2d>
 800114a:	4680      	mov	r8, r0
 800114c:	4689      	mov	r9, r1
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <main+0xf0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <main+0xf0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	4610      	mov	r0, r2
 800115e:	f7fe fff7 	bl	8000150 <__aeabi_fmul>
 8001162:	4603      	mov	r3, r0
 8001164:	461e      	mov	r6, r3
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <main+0xf0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <main+0xf0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f7fe ffeb 	bl	8000150 <__aeabi_fmul>
 800117a:	4603      	mov	r3, r0
 800117c:	4619      	mov	r1, r3
 800117e:	4630      	mov	r0, r6
 8001180:	f7ff fd5c 	bl	8000c3c <__addsf3>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9fa 	bl	8000580 <__aeabi_f2d>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f003 fdb8 	bl	8004d08 <sqrt>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4640      	mov	r0, r8
 800119e:	4649      	mov	r1, r9
 80011a0:	f7ff fb70 	bl	8000884 <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f003 fdd0 	bl	8004d50 <atan>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff fa3a 	bl	8000630 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fce4 	bl	8000b90 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <main+0xf8>)
 80011cc:	6013      	str	r3, [r2, #0]
	  AOSpeedMotorLeft(100);
 80011ce:	e7a6      	b.n	800111e <main+0x32>
 80011d0:	20000104 	.word	0x20000104
 80011d4:	20000194 	.word	0x20000194
 80011d8:	2000014c 	.word	0x2000014c
 80011dc:	200001ac 	.word	0x200001ac
 80011e0:	42652ee1 	.word	0x42652ee1
 80011e4:	200001b0 	.word	0x200001b0

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b090      	sub	sp, #64	; 0x40
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0318 	add.w	r3, r7, #24
 80011f2:	2228      	movs	r2, #40	; 0x28
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fd54 	bl	8004ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800120e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001212:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001226:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122c:	f107 0318 	add.w	r3, r7, #24
 8001230:	4618      	mov	r0, r3
 8001232:	f001 ffa1 	bl	8003178 <HAL_RCC_OscConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800123c:	f000 fa2e 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	230f      	movs	r3, #15
 8001242:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001244:	2302      	movs	r3, #2
 8001246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800124c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2102      	movs	r1, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f002 fa0e 	bl	800367c <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001266:	f000 fa19 	bl	800169c <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3740      	adds	r7, #64	; 0x40
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x50>)
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <MX_I2C1_Init+0x54>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_I2C1_Init+0x58>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012b2:	f000 ff07 	bl	80020c4 <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 f9ee 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000b0 	.word	0x200000b0
 80012c8:	40005400 	.word	0x40005400
 80012cc:	000186a0 	.word	0x000186a0

080012d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	463b      	mov	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_TIM2_Init+0x94>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_TIM2_Init+0x94>)
 80012f6:	2247      	movs	r2, #71	; 0x47
 80012f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_TIM2_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_TIM2_Init+0x94>)
 8001302:	2213      	movs	r2, #19
 8001304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_TIM2_Init+0x94>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_TIM2_Init+0x94>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <MX_TIM2_Init+0x94>)
 8001314:	f002 fb40 	bl	8003998 <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800131e:	f000 f9bd 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_TIM2_Init+0x94>)
 8001330:	f002 fcdc 	bl	8003cec <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 f9af 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <MX_TIM2_Init+0x94>)
 800134c:	f002 feb2 	bl	80040b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001356:	f000 f9a1 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000104 	.word	0x20000104

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f002 fef8 	bl	8004194 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f977 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000014c 	.word	0x2000014c
 80013b8:	40013800 	.word	0x40013800

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_GPIO_Init+0x8c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_GPIO_Init+0x8c>)
 80013d6:	f043 0320 	orr.w	r3, r3, #32
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_GPIO_Init+0x8c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_GPIO_Init+0x8c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a16      	ldr	r2, [pc, #88]	; (8001448 <MX_GPIO_Init+0x8c>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_GPIO_Init+0x8c>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_GPIO_Init+0x8c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <MX_GPIO_Init+0x8c>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_GPIO_Init+0x8c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001418:	2200      	movs	r2, #0
 800141a:	211f      	movs	r1, #31
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <MX_GPIO_Init+0x90>)
 800141e:	f000 fe39 	bl	8002094 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001422:	231f      	movs	r3, #31
 8001424:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2302      	movs	r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_GPIO_Init+0x90>)
 800143a:	f000 fca7 	bl	8001d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	40010800 	.word	0x40010800

08001450 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
/*
 * This function is called every 2us
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b45      	ldr	r3, [pc, #276]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8082 	bne.w	800156a <HAL_TIM_PeriodElapsedCallback+0x11a>
	{
		if (n8DirLeft != 0)
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001468:	f993 3000 	ldrsb.w	r3, [r3]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d03b      	beq.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x98>
		{
			u8Counter20usLeft++;
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800147c:	701a      	strb	r2, [r3, #0]
			if (u8Counter20usLeft <= n16CounterTopLeft)
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	429a      	cmp	r2, r3
 800148e:	dc05      	bgt.n	800149c <HAL_TIM_PeriodElapsedCallback+0x4c>
			{
				// Set Step pin = HIGH
				HAL_GPIO_WritePin(STEP_PORT_LEFT, STEP_PIN_LEFT, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	2104      	movs	r1, #4
 8001494:	483b      	ldr	r0, [pc, #236]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001496:	f000 fdfd 	bl	8002094 <HAL_GPIO_WritePin>
 800149a:	e004      	b.n	80014a6 <HAL_TIM_PeriodElapsedCallback+0x56>
			}
			else
			{
				// Set Step pin = LOW
				HAL_GPIO_WritePin(STEP_PORT_LEFT, STEP_PIN_LEFT, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2104      	movs	r1, #4
 80014a0:	4838      	ldr	r0, [pc, #224]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014a2:	f000 fdf7 	bl	8002094 <HAL_GPIO_WritePin>
			}

			if (u8Counter20usLeft > n16CounterBotLeft)
 80014a6:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b36      	ldr	r3, [pc, #216]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	dd17      	ble.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x98>
			{
				u8Counter20usLeft = 0;
 80014b8:	4b30      	ldr	r3, [pc, #192]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
				if (n8DirLeft > 0)
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014c0:	f993 3000 	ldrsb.w	r3, [r3]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dd05      	ble.n	80014d4 <HAL_TIM_PeriodElapsedCallback+0x84>
				{
					n32StepLeft++;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a2f      	ldr	r2, [pc, #188]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e009      	b.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x98>
				}
				else if (n8DirLeft < 0)
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80014d6:	f993 3000 	ldrsb.w	r3, [r3]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	da04      	bge.n	80014e8 <HAL_TIM_PeriodElapsedCallback+0x98>
				{
					n32StepLeft--;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	4a29      	ldr	r2, [pc, #164]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014e6:	6013      	str	r3, [r2, #0]
				}
			}
		}

		if (n8DirRight != 0)
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014ea:	f993 3000 	ldrsb.w	r3, [r3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03b      	beq.n	800156a <HAL_TIM_PeriodElapsedCallback+0x11a>
		{
			u8Counter20usRight++;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014fe:	701a      	strb	r2, [r3, #0]
			if (u8Counter20usRight <= n16CounterTopRight)
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	429a      	cmp	r2, r3
 8001510:	dc05      	bgt.n	800151e <HAL_TIM_PeriodElapsedCallback+0xce>
			{
				// Set Step pin = HIGH
				HAL_GPIO_WritePin(STEP_PORT_RIGHT, STEP_PIN_RIGHT, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2110      	movs	r1, #16
 8001516:	481b      	ldr	r0, [pc, #108]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001518:	f000 fdbc 	bl	8002094 <HAL_GPIO_WritePin>
 800151c:	e004      	b.n	8001528 <HAL_TIM_PeriodElapsedCallback+0xd8>
			}
			else
			{
				// Set Step pin = LOW
				HAL_GPIO_WritePin(STEP_PORT_RIGHT, STEP_PIN_RIGHT, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2110      	movs	r1, #16
 8001522:	4818      	ldr	r0, [pc, #96]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001524:	f000 fdb6 	bl	8002094 <HAL_GPIO_WritePin>
			}

			if (u8Counter20usRight > n16CounterBotRight)
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	429a      	cmp	r2, r3
 8001538:	dd17      	ble.n	800156a <HAL_TIM_PeriodElapsedCallback+0x11a>
			{
				u8Counter20usRight = 0;
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
				if (n8DirRight > 0)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001542:	f993 3000 	ldrsb.w	r3, [r3]
 8001546:	2b00      	cmp	r3, #0
 8001548:	dd05      	ble.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x106>
				{
					n32StepRight++;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001552:	6013      	str	r3, [r2, #0]
					n32StepRight--;
				}
			}
		}
	}
}
 8001554:	e009      	b.n	800156a <HAL_TIM_PeriodElapsedCallback+0x11a>
				else if (n8DirRight < 0)
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001558:	f993 3000 	ldrsb.w	r3, [r3]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da04      	bge.n	800156a <HAL_TIM_PeriodElapsedCallback+0x11a>
					n32StepRight--;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000104 	.word	0x20000104
 8001578:	20000195 	.word	0x20000195
 800157c:	20000197 	.word	0x20000197
 8001580:	200001a4 	.word	0x200001a4
 8001584:	40010800 	.word	0x40010800
 8001588:	200001a6 	.word	0x200001a6
 800158c:	2000019c 	.word	0x2000019c
 8001590:	20000196 	.word	0x20000196
 8001594:	20000198 	.word	0x20000198
 8001598:	200001a8 	.word	0x200001a8
 800159c:	200001aa 	.word	0x200001aa
 80015a0:	200001a0 	.word	0x200001a0

080015a4 <AOSpeedMotorLeft>:
 * @email: hoang.ngo000187@gmail.com
 *
 * This function AOSpeedMotorLeft and AOSpeedMotorRight is to control the speed of each motor
 */
void AOSpeedMotorLeft(INT16 Param)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
	/*
	 * Param = large value --> Speed up
	 * Param = small value --> Low down
	 * Param = 0 --> Stop
	 */
	n16CounterBotLeft = abs(Param);
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bfb8      	it	lt
 80015b6:	425b      	neglt	r3, r3
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <AOSpeedMotorLeft+0x78>)
 80015be:	801a      	strh	r2, [r3, #0]
	n16CounterTopLeft = abs(Param)/2;
 80015c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bfb8      	it	lt
 80015c8:	425b      	neglt	r3, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	0fda      	lsrs	r2, r3, #31
 80015ce:	4413      	add	r3, r2
 80015d0:	105b      	asrs	r3, r3, #1
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <AOSpeedMotorLeft+0x7c>)
 80015d6:	801a      	strh	r2, [r3, #0]
	if (Param < 0)
 80015d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da08      	bge.n	80015f2 <AOSpeedMotorLeft+0x4e>
	{
		HAL_GPIO_WritePin(DIR_PORT_LEFT, DIR_PIN_LEFT, GPIO_PIN_RESET); // Set Dir pin left --> LOW
 80015e0:	2200      	movs	r2, #0
 80015e2:	2102      	movs	r1, #2
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <AOSpeedMotorLeft+0x80>)
 80015e6:	f000 fd55 	bl	8002094 <HAL_GPIO_WritePin>
		n8DirLeft = -1; // anti-clockwise
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <AOSpeedMotorLeft+0x84>)
 80015ec:	22ff      	movs	r2, #255	; 0xff
 80015ee:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		n8DirLeft = 0; // Stop motor
	}
}
 80015f0:	e00f      	b.n	8001612 <AOSpeedMotorLeft+0x6e>
	else if (Param > 0)
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dd08      	ble.n	800160c <AOSpeedMotorLeft+0x68>
		HAL_GPIO_WritePin(DIR_PORT_LEFT, DIR_PIN_LEFT, GPIO_PIN_SET); // Set Dir pin left --> HIGH
 80015fa:	2201      	movs	r2, #1
 80015fc:	2102      	movs	r1, #2
 80015fe:	4809      	ldr	r0, [pc, #36]	; (8001624 <AOSpeedMotorLeft+0x80>)
 8001600:	f000 fd48 	bl	8002094 <HAL_GPIO_WritePin>
		n8DirLeft = 1; // clockwise
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <AOSpeedMotorLeft+0x84>)
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	e002      	b.n	8001612 <AOSpeedMotorLeft+0x6e>
		n8DirLeft = 0; // Stop motor
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <AOSpeedMotorLeft+0x84>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200001a6 	.word	0x200001a6
 8001620:	200001a4 	.word	0x200001a4
 8001624:	40010800 	.word	0x40010800
 8001628:	20000195 	.word	0x20000195

0800162c <AppGet_hi2c1>:

/*
 *	Get function for hi2c1
 */
I2C_HandleTypeDef* AppGet_hi2c1(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
	return &hi2c1;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <AppGet_hi2c1+0x10>)
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200000b0 	.word	0x200000b0

08001640 <HAL_UART_RxCpltCallback>:

/* UART1 Interrupt */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0f      	ldr	r2, [pc, #60]	; (800168c <HAL_UART_RxCpltCallback+0x4c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d117      	bne.n	8001682 <HAL_UART_RxCpltCallback+0x42>
  {
    if(u8RxData==78) // Ascii value of 'N' is 78 (N for NO)
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_UART_RxCpltCallback+0x50>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b4e      	cmp	r3, #78	; 0x4e
 8001658:	d105      	bne.n	8001666 <HAL_UART_RxCpltCallback+0x26>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <HAL_UART_RxCpltCallback+0x54>)
 8001660:	f000 fd18 	bl	8002094 <HAL_GPIO_WritePin>
 8001664:	e008      	b.n	8001678 <HAL_UART_RxCpltCallback+0x38>
    }
    else if (u8RxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_UART_RxCpltCallback+0x50>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b59      	cmp	r3, #89	; 0x59
 800166c:	d104      	bne.n	8001678 <HAL_UART_RxCpltCallback+0x38>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2101      	movs	r1, #1
 8001672:	4808      	ldr	r0, [pc, #32]	; (8001694 <HAL_UART_RxCpltCallback+0x54>)
 8001674:	f000 fd0e 	bl	8002094 <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&u8RxData,1); // Enabling interrupt receive again
 8001678:	2201      	movs	r2, #1
 800167a:	4905      	ldr	r1, [pc, #20]	; (8001690 <HAL_UART_RxCpltCallback+0x50>)
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <HAL_UART_RxCpltCallback+0x58>)
 800167e:	f002 fdd9 	bl	8004234 <HAL_UART_Receive_IT>
  }
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40013800 	.word	0x40013800
 8001690:	20000194 	.word	0x20000194
 8001694:	40010800 	.word	0x40010800
 8001698:	2000014c 	.word	0x2000014c

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_MspInit+0x5c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_MspInit+0x5c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_MspInit+0x60>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_MspInit+0x60>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_I2C_MspInit+0x70>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d123      	bne.n	8001774 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_I2C_MspInit+0x74>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_I2C_MspInit+0x74>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_I2C_MspInit+0x74>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001744:	23c0      	movs	r3, #192	; 0xc0
 8001746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001748:	2312      	movs	r3, #18
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	4619      	mov	r1, r3
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <HAL_I2C_MspInit+0x78>)
 8001758:	f000 fb18 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_I2C_MspInit+0x74>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_I2C_MspInit+0x74>)
 8001762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001766:	61d3      	str	r3, [r2, #28]
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_I2C_MspInit+0x74>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40005400 	.word	0x40005400
 8001780:	40021000 	.word	0x40021000
 8001784:	40010c00 	.word	0x40010c00

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001798:	d113      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_TIM_Base_MspInit+0x44>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <HAL_TIM_Base_MspInit+0x44>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_TIM_Base_MspInit+0x44>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	201c      	movs	r0, #28
 80017b8:	f000 f9ff 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017bc:	201c      	movs	r0, #28
 80017be:	f000 fa18 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_UART_MspInit+0x9c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d139      	bne.n	8001864 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_UART_MspInit+0xa0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <HAL_UART_MspInit+0xa0>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_UART_MspInit+0xa0>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_UART_MspInit+0xa0>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_UART_MspInit+0xa0>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_UART_MspInit+0xa0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4619      	mov	r1, r3
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <HAL_UART_MspInit+0xa4>)
 8001836:	f000 faa9 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4809      	ldr	r0, [pc, #36]	; (8001874 <HAL_UART_MspInit+0xa4>)
 8001850:	f000 fa9c 	bl	8001d8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2025      	movs	r0, #37	; 0x25
 800185a:	f000 f9ae 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800185e:	2025      	movs	r0, #37	; 0x25
 8001860:	f000 f9c7 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40013800 	.word	0x40013800
 8001870:	40021000 	.word	0x40021000
 8001874:	40010800 	.word	0x40010800

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f889 	bl	80019d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM2_IRQHandler+0x10>)
 80018ce:	f002 f905 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000104 	.word	0x20000104

080018dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USART1_IRQHandler+0x10>)
 80018e2:	f002 fccd 	bl	8004280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000014c 	.word	0x2000014c

080018f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018fc:	f7ff fff8 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001902:	490c      	ldr	r1, [pc, #48]	; (8001934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a09      	ldr	r2, [pc, #36]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001918:	4c09      	ldr	r4, [pc, #36]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f003 f9cb 	bl	8004cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192a:	f7ff fbdf 	bl	80010ec <main>
  bx lr
 800192e:	4770      	bx	lr
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001938:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 800193c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001940:	200002f0 	.word	0x200002f0

08001944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC1_2_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_Init+0x28>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_Init+0x28>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 f923 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195e:	200f      	movs	r0, #15
 8001960:	f000 f808 	bl	8001974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001964:	f7ff fea0 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40022000 	.word	0x40022000

08001974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x54>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x58>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	fbb3 f3f1 	udiv	r3, r3, r1
 800198e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f93b 	bl	8001c0e <HAL_SYSTICK_Config>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e00e      	b.n	80019c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d80a      	bhi.n	80019be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a8:	2200      	movs	r2, #0
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f000 f903 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b4:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <HAL_InitTick+0x5c>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000004 	.word	0x20000004

080019d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_IncTick+0x1c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_IncTick+0x20>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <HAL_IncTick+0x20>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000008 	.word	0x20000008
 80019f4:	200001b4 	.word	0x200001b4

080019f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b02      	ldr	r3, [pc, #8]	; (8001a08 <HAL_GetTick+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	200001b4 	.word	0x200001b4

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <__NVIC_EnableIRQ+0x34>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100

08001aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	db0a      	blt.n	8001ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <__NVIC_SetPriority+0x4c>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	440b      	add	r3, r1
 8001acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad0:	e00a      	b.n	8001ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4908      	ldr	r1, [pc, #32]	; (8001af8 <__NVIC_SetPriority+0x50>)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	3b04      	subs	r3, #4
 8001ae0:	0112      	lsls	r2, r2, #4
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	761a      	strb	r2, [r3, #24]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b089      	sub	sp, #36	; 0x24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f1c3 0307 	rsb	r3, r3, #7
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	bf28      	it	cs
 8001b1a:	2304      	movcs	r3, #4
 8001b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3304      	adds	r3, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d902      	bls.n	8001b2c <NVIC_EncodePriority+0x30>
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3b03      	subs	r3, #3
 8001b2a:	e000      	b.n	8001b2e <NVIC_EncodePriority+0x32>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43da      	mvns	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	401a      	ands	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43d9      	mvns	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b54:	4313      	orrs	r3, r2
         );
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff90 	bl	8001aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff2d 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff42 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff90 	bl	8001afc <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5f 	bl	8001aa8 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff35 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b085      	sub	sp, #20
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d008      	beq.n	8001c50 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e020      	b.n	8001c92 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 020e 	bic.w	r2, r2, #14
 8001c5e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d005      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	e051      	b.n	8001d64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 020e 	bic.w	r2, r2, #14
 8001cce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_DMA_Abort_IT+0xd4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d029      	beq.n	8001d3e <HAL_DMA_Abort_IT+0xa2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_DMA_Abort_IT+0xd8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d022      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x9e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_DMA_Abort_IT+0xdc>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01a      	beq.n	8001d34 <HAL_DMA_Abort_IT+0x98>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1e      	ldr	r2, [pc, #120]	; (8001d7c <HAL_DMA_Abort_IT+0xe0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d012      	beq.n	8001d2e <HAL_DMA_Abort_IT+0x92>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_DMA_Abort_IT+0xe4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00a      	beq.n	8001d28 <HAL_DMA_Abort_IT+0x8c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_DMA_Abort_IT+0xe8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d102      	bne.n	8001d22 <HAL_DMA_Abort_IT+0x86>
 8001d1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d20:	e00e      	b.n	8001d40 <HAL_DMA_Abort_IT+0xa4>
 8001d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d26:	e00b      	b.n	8001d40 <HAL_DMA_Abort_IT+0xa4>
 8001d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2c:	e008      	b.n	8001d40 <HAL_DMA_Abort_IT+0xa4>
 8001d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d32:	e005      	b.n	8001d40 <HAL_DMA_Abort_IT+0xa4>
 8001d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d38:	e002      	b.n	8001d40 <HAL_DMA_Abort_IT+0xa4>
 8001d3a:	2310      	movs	r3, #16
 8001d3c:	e000      	b.n	8001d40 <HAL_DMA_Abort_IT+0xa4>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_DMA_Abort_IT+0xec>)
 8001d42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
    } 
  }
  return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40020008 	.word	0x40020008
 8001d74:	4002001c 	.word	0x4002001c
 8001d78:	40020030 	.word	0x40020030
 8001d7c:	40020044 	.word	0x40020044
 8001d80:	40020058 	.word	0x40020058
 8001d84:	4002006c 	.word	0x4002006c
 8001d88:	40020000 	.word	0x40020000

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b08b      	sub	sp, #44	; 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e169      	b.n	8002074 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da0:	2201      	movs	r2, #1
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f040 8158 	bne.w	800206e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a9a      	ldr	r2, [pc, #616]	; (800202c <HAL_GPIO_Init+0x2a0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d05e      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a98      	ldr	r2, [pc, #608]	; (800202c <HAL_GPIO_Init+0x2a0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d875      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001dce:	4a98      	ldr	r2, [pc, #608]	; (8002030 <HAL_GPIO_Init+0x2a4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d058      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a96      	ldr	r2, [pc, #600]	; (8002030 <HAL_GPIO_Init+0x2a4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d86f      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001dda:	4a96      	ldr	r2, [pc, #600]	; (8002034 <HAL_GPIO_Init+0x2a8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d052      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001de0:	4a94      	ldr	r2, [pc, #592]	; (8002034 <HAL_GPIO_Init+0x2a8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d869      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001de6:	4a94      	ldr	r2, [pc, #592]	; (8002038 <HAL_GPIO_Init+0x2ac>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d04c      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001dec:	4a92      	ldr	r2, [pc, #584]	; (8002038 <HAL_GPIO_Init+0x2ac>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d863      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001df2:	4a92      	ldr	r2, [pc, #584]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d046      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
 8001df8:	4a90      	ldr	r2, [pc, #576]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d85d      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d82a      	bhi.n	8001e58 <HAL_GPIO_Init+0xcc>
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d859      	bhi.n	8001eba <HAL_GPIO_Init+0x12e>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <HAL_GPIO_Init+0x80>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e87 	.word	0x08001e87
 8001e10:	08001e61 	.word	0x08001e61
 8001e14:	08001e73 	.word	0x08001e73
 8001e18:	08001eb5 	.word	0x08001eb5
 8001e1c:	08001ebb 	.word	0x08001ebb
 8001e20:	08001ebb 	.word	0x08001ebb
 8001e24:	08001ebb 	.word	0x08001ebb
 8001e28:	08001ebb 	.word	0x08001ebb
 8001e2c:	08001ebb 	.word	0x08001ebb
 8001e30:	08001ebb 	.word	0x08001ebb
 8001e34:	08001ebb 	.word	0x08001ebb
 8001e38:	08001ebb 	.word	0x08001ebb
 8001e3c:	08001ebb 	.word	0x08001ebb
 8001e40:	08001ebb 	.word	0x08001ebb
 8001e44:	08001ebb 	.word	0x08001ebb
 8001e48:	08001ebb 	.word	0x08001ebb
 8001e4c:	08001ebb 	.word	0x08001ebb
 8001e50:	08001e69 	.word	0x08001e69
 8001e54:	08001e7d 	.word	0x08001e7d
 8001e58:	4a79      	ldr	r2, [pc, #484]	; (8002040 <HAL_GPIO_Init+0x2b4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e5e:	e02c      	b.n	8001eba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e029      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e024      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	3308      	adds	r3, #8
 8001e78:	623b      	str	r3, [r7, #32]
          break;
 8001e7a:	e01f      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	330c      	adds	r3, #12
 8001e82:	623b      	str	r3, [r7, #32]
          break;
 8001e84:	e01a      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e8e:	2304      	movs	r3, #4
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e013      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	611a      	str	r2, [r3, #16]
          break;
 8001ea6:	e009      	b.n	8001ebc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	615a      	str	r2, [r3, #20]
          break;
 8001eb2:	e003      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x130>
          break;
 8001eba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2bff      	cmp	r3, #255	; 0xff
 8001ec0:	d801      	bhi.n	8001ec6 <HAL_GPIO_Init+0x13a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	e001      	b.n	8001eca <HAL_GPIO_Init+0x13e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2bff      	cmp	r3, #255	; 0xff
 8001ed0:	d802      	bhi.n	8001ed8 <HAL_GPIO_Init+0x14c>
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	e002      	b.n	8001ede <HAL_GPIO_Init+0x152>
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	3b08      	subs	r3, #8
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	6a39      	ldr	r1, [r7, #32]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 80b1 	beq.w	800206e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f24:	4a48      	ldr	r2, [pc, #288]	; (8002048 <HAL_GPIO_Init+0x2bc>)
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a40      	ldr	r2, [pc, #256]	; (800204c <HAL_GPIO_Init+0x2c0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d013      	beq.n	8001f78 <HAL_GPIO_Init+0x1ec>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3f      	ldr	r2, [pc, #252]	; (8002050 <HAL_GPIO_Init+0x2c4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00d      	beq.n	8001f74 <HAL_GPIO_Init+0x1e8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <HAL_GPIO_Init+0x2c8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d007      	beq.n	8001f70 <HAL_GPIO_Init+0x1e4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3d      	ldr	r2, [pc, #244]	; (8002058 <HAL_GPIO_Init+0x2cc>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_GPIO_Init+0x1e0>
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e006      	b.n	8001f7a <HAL_GPIO_Init+0x1ee>
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	e004      	b.n	8001f7a <HAL_GPIO_Init+0x1ee>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x1ee>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_GPIO_Init+0x1ee>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f8a:	492f      	ldr	r1, [pc, #188]	; (8002048 <HAL_GPIO_Init+0x2bc>)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	492c      	ldr	r1, [pc, #176]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4928      	ldr	r1, [pc, #160]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60cb      	str	r3, [r1, #12]
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	491e      	ldr	r1, [pc, #120]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	4918      	ldr	r1, [pc, #96]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	4914      	ldr	r1, [pc, #80]	; (800205c <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d021      	beq.n	8002060 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_GPIO_Init+0x2d0>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e021      	b.n	800206e <HAL_GPIO_Init+0x2e2>
 800202a:	bf00      	nop
 800202c:	10320000 	.word	0x10320000
 8002030:	10310000 	.word	0x10310000
 8002034:	10220000 	.word	0x10220000
 8002038:	10210000 	.word	0x10210000
 800203c:	10120000 	.word	0x10120000
 8002040:	10110000 	.word	0x10110000
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	40010800 	.word	0x40010800
 8002050:	40010c00 	.word	0x40010c00
 8002054:	40011000 	.word	0x40011000
 8002058:	40011400 	.word	0x40011400
 800205c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_GPIO_Init+0x304>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	43db      	mvns	r3, r3
 8002068:	4909      	ldr	r1, [pc, #36]	; (8002090 <HAL_GPIO_Init+0x304>)
 800206a:	4013      	ands	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3301      	adds	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f ae8e 	bne.w	8001da0 <HAL_GPIO_Init+0x14>
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	372c      	adds	r7, #44	; 0x2c
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020b0:	e003      	b.n	80020ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	041a      	lsls	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e12b      	b.n	800232e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fb0e 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002128:	f001 fbf0 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 800212c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4a81      	ldr	r2, [pc, #516]	; (8002338 <HAL_I2C_Init+0x274>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d807      	bhi.n	8002148 <HAL_I2C_Init+0x84>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a80      	ldr	r2, [pc, #512]	; (800233c <HAL_I2C_Init+0x278>)
 800213c:	4293      	cmp	r3, r2
 800213e:	bf94      	ite	ls
 8002140:	2301      	movls	r3, #1
 8002142:	2300      	movhi	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e006      	b.n	8002156 <HAL_I2C_Init+0x92>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a7d      	ldr	r2, [pc, #500]	; (8002340 <HAL_I2C_Init+0x27c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0e7      	b.n	800232e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4a78      	ldr	r2, [pc, #480]	; (8002344 <HAL_I2C_Init+0x280>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0c9b      	lsrs	r3, r3, #18
 8002168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a6a      	ldr	r2, [pc, #424]	; (8002338 <HAL_I2C_Init+0x274>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d802      	bhi.n	8002198 <HAL_I2C_Init+0xd4>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	e009      	b.n	80021ac <HAL_I2C_Init+0xe8>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <HAL_I2C_Init+0x284>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	3301      	adds	r3, #1
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	495c      	ldr	r1, [pc, #368]	; (8002338 <HAL_I2C_Init+0x274>)
 80021c8:	428b      	cmp	r3, r1
 80021ca:	d819      	bhi.n	8002200 <HAL_I2C_Init+0x13c>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e59      	subs	r1, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021e0:	400b      	ands	r3, r1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_I2C_Init+0x138>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1e59      	subs	r1, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fa:	e051      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e04f      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d111      	bne.n	800222c <HAL_I2C_Init+0x168>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e012      	b.n	8002252 <HAL_I2C_Init+0x18e>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1e58      	subs	r0, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	0099      	lsls	r1, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf0c      	ite	eq
 800224c:	2301      	moveq	r3, #1
 800224e:	2300      	movne	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_Init+0x196>
 8002256:	2301      	movs	r3, #1
 8002258:	e022      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10e      	bne.n	8002280 <HAL_I2C_Init+0x1bc>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1e58      	subs	r0, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	440b      	add	r3, r1
 8002270:	fbb0 f3f3 	udiv	r3, r0, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227e:	e00f      	b.n	80022a0 <HAL_I2C_Init+0x1dc>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1e58      	subs	r0, r3, #1
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	0099      	lsls	r1, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	fbb0 f3f3 	udiv	r3, r0, r3
 8002296:	3301      	adds	r3, #1
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	6809      	ldr	r1, [r1, #0]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6911      	ldr	r1, [r2, #16]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68d2      	ldr	r2, [r2, #12]
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	000186a0 	.word	0x000186a0
 800233c:	001e847f 	.word	0x001e847f
 8002340:	003d08ff 	.word	0x003d08ff
 8002344:	431bde83 	.word	0x431bde83
 8002348:	10624dd3 	.word	0x10624dd3

0800234c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4603      	mov	r3, r0
 800235c:	817b      	strh	r3, [r7, #10]
 800235e:	460b      	mov	r3, r1
 8002360:	813b      	strh	r3, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002366:	f7ff fb47 	bl	80019f8 <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b20      	cmp	r3, #32
 8002376:	f040 80d9 	bne.w	800252c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2319      	movs	r3, #25
 8002380:	2201      	movs	r2, #1
 8002382:	496d      	ldr	r1, [pc, #436]	; (8002538 <HAL_I2C_Mem_Write+0x1ec>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fcc1 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
 8002392:	e0cc      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2C_Mem_Write+0x56>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0c5      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d007      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2221      	movs	r2, #33	; 0x21
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a4d      	ldr	r2, [pc, #308]	; (800253c <HAL_I2C_Mem_Write+0x1f0>)
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800240a:	88f8      	ldrh	r0, [r7, #6]
 800240c:	893a      	ldrh	r2, [r7, #8]
 800240e:	8979      	ldrh	r1, [r7, #10]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4603      	mov	r3, r0
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 faf8 	bl	8002a10 <I2C_RequestMemoryWrite>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d052      	beq.n	80024cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e081      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 fd86 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06b      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d11b      	bne.n	80024cc <HAL_I2C_Mem_Write+0x180>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d017      	beq.n	80024cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1aa      	bne.n	800242a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fd79 	bl	8002fd0 <I2C_WaitOnBTFFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d107      	bne.n	80024fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e016      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	00100002 	.word	0x00100002
 800253c:	ffff0000 	.word	0xffff0000

08002540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800255e:	f7ff fa4b 	bl	80019f8 <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b20      	cmp	r3, #32
 800256e:	f040 8244 	bne.w	80029fa <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2319      	movs	r3, #25
 8002578:	2201      	movs	r2, #1
 800257a:	4982      	ldr	r1, [pc, #520]	; (8002784 <HAL_I2C_Mem_Read+0x244>)
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fbc5 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
 800258a:	e237      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_I2C_Mem_Read+0x5a>
 8002596:	2302      	movs	r3, #2
 8002598:	e230      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d007      	beq.n	80025c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2222      	movs	r2, #34	; 0x22
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a62      	ldr	r2, [pc, #392]	; (8002788 <HAL_I2C_Mem_Read+0x248>)
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002602:	88f8      	ldrh	r0, [r7, #6]
 8002604:	893a      	ldrh	r2, [r7, #8]
 8002606:	8979      	ldrh	r1, [r7, #10]
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4603      	mov	r3, r0
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa92 	bl	8002b3c <I2C_RequestMemoryRead>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1ec      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d113      	bne.n	8002652 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e1c0      	b.n	80029d4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	2b01      	cmp	r3, #1
 8002658:	d11e      	bne.n	8002698 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800266a:	b672      	cpsid	i
}
 800266c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002694:	b662      	cpsie	i
}
 8002696:	e035      	b.n	8002704 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	2b02      	cmp	r3, #2
 800269e:	d11e      	bne.n	80026de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026da:	b662      	cpsie	i
}
 80026dc:	e012      	b.n	8002704 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002704:	e166      	b.n	80029d4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	2b03      	cmp	r3, #3
 800270c:	f200 811f 	bhi.w	800294e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b01      	cmp	r3, #1
 8002716:	d123      	bne.n	8002760 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fc9f 	bl	8003060 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e167      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800275e:	e139      	b.n	80029d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	2b02      	cmp	r3, #2
 8002766:	d152      	bne.n	800280e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	2200      	movs	r2, #0
 8002770:	4906      	ldr	r1, [pc, #24]	; (800278c <HAL_I2C_Mem_Read+0x24c>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 faca 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e13c      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
 8002782:	bf00      	nop
 8002784:	00100002 	.word	0x00100002
 8002788:	ffff0000 	.word	0xffff0000
 800278c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027d6:	b662      	cpsie	i
}
 80027d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800280c:	e0e2      	b.n	80029d4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	2200      	movs	r2, #0
 8002816:	497b      	ldr	r1, [pc, #492]	; (8002a04 <HAL_I2C_Mem_Read+0x4c4>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fa77 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0e9      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002836:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800286e:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_I2C_Mem_Read+0x4c8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_I2C_Mem_Read+0x4cc>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a1a      	lsrs	r2, r3, #8
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00da      	lsls	r2, r3, #3
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	3b01      	subs	r3, #1
 800288c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d118      	bne.n	80028c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80028b6:	b662      	cpsie	i
}
 80028b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e09a      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d1d9      	bne.n	8002888 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002916:	b662      	cpsie	i
}
 8002918:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800294c:	e042      	b.n	80029d4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fb84 	bl	8003060 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e04c      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d118      	bne.n	80029d4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f ae94 	bne.w	8002706 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
  }
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3728      	adds	r7, #40	; 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	00010004 	.word	0x00010004
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	14f8b589 	.word	0x14f8b589

08002a10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f960 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d103      	bne.n	8002a6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e05f      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	492d      	ldr	r1, [pc, #180]	; (8002b38 <I2C_RequestMemoryWrite+0x128>)
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9bb 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e04c      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aac:	6a39      	ldr	r1, [r7, #32]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fa46 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d107      	bne.n	8002ad2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e02b      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d105      	bne.n	8002ae8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]
 8002ae6:	e021      	b.n	8002b2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ae8:	893b      	ldrh	r3, [r7, #8]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af8:	6a39      	ldr	r1, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa20 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d107      	bne.n	8002b1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e005      	b.n	8002b2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b22:	893b      	ldrh	r3, [r7, #8]
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	00010002 	.word	0x00010002

08002b3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	817b      	strh	r3, [r7, #10]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	813b      	strh	r3, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f8c2 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b9c:	d103      	bne.n	8002ba6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0aa      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	4952      	ldr	r1, [pc, #328]	; (8002d08 <I2C_RequestMemoryRead+0x1cc>)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f91d 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e097      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be8:	6a39      	ldr	r1, [r7, #32]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f9a8 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d107      	bne.n	8002c0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e076      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c18:	893b      	ldrh	r3, [r7, #8]
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	e021      	b.n	8002c68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c24:	893b      	ldrh	r3, [r7, #8]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	6a39      	ldr	r1, [r7, #32]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f982 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00d      	beq.n	8002c5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e050      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c5e:	893b      	ldrh	r3, [r7, #8]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f967 	bl	8002f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d107      	bne.n	8002c90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e035      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f82b 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cca:	d103      	bne.n	8002cd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e013      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cd8:	897b      	ldrh	r3, [r7, #10]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	6a3a      	ldr	r2, [r7, #32]
 8002cec:	4906      	ldr	r1, [pc, #24]	; (8002d08 <I2C_RequestMemoryRead+0x1cc>)
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 f886 	bl	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	00010002 	.word	0x00010002

08002d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1c:	e048      	b.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d044      	beq.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe fe67 	bl	80019f8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d139      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10d      	bne.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4013      	ands	r3, r2
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	e00c      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d116      	bne.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e023      	b.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10d      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	e00c      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d093      	beq.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e0e:	e071      	b.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d123      	bne.n	8002e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f043 0204 	orr.w	r2, r3, #4
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e067      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d041      	beq.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e70:	f7fe fdc2 	bl	80019f8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d302      	bcc.n	8002e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d136      	bne.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10c      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e00b      	b.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d016      	beq.n	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e021      	b.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	0c1b      	lsrs	r3, r3, #16
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d10c      	bne.n	8002f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	43da      	mvns	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e00b      	b.n	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f47f af6d 	bne.w	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8e3 	bl	800311a <I2C_IsAcknowledgeFailed>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e034      	b.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d028      	beq.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe fd47 	bl	80019f8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d11d      	bne.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b80      	cmp	r3, #128	; 0x80
 8002f88:	d016      	beq.n	8002fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d1c3      	bne.n	8002f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f89b 	bl	800311a <I2C_IsAcknowledgeFailed>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e034      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d028      	beq.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7fe fcff 	bl	80019f8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11d      	bne.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d016      	beq.n	8003048 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d1c3      	bne.n	8002fde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800306c:	e049      	b.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b10      	cmp	r3, #16
 800307a:	d119      	bne.n	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0210 	mvn.w	r2, #16
 8003084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e030      	b.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe fca2 	bl	80019f8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11d      	bne.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d016      	beq.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e007      	b.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d1ae      	bne.n	800306e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d11b      	bne.n	800316a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800313a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0204 	orr.w	r2, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
	...

08003178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e272      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8087 	beq.w	80032a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003198:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d00c      	beq.n	80031be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a4:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d112      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031be:	4b89      	ldr	r3, [pc, #548]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x12c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d168      	bne.n	80032a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e24c      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x76>
 80031e0:	4b80      	ldr	r3, [pc, #512]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7f      	ldr	r2, [pc, #508]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x98>
 80031f6:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0xbc>
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003234:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a67      	ldr	r2, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fbd0 	bl	80019f8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fbcc 	bl	80019f8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e200      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xe4>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fbbc 	bl	80019f8 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fbb8 	bl	80019f8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1ec      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x10c>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d063      	beq.n	800337a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032be:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x18c>
 80032ca:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x176>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1c0      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4939      	ldr	r1, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e03a      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_RCC_OscConfig+0x270>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe fb71 	bl	80019f8 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe fb6d 	bl	80019f8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1a1      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4927      	ldr	r1, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_RCC_OscConfig+0x270>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fb50 	bl	80019f8 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe fb4c 	bl	80019f8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e180      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d03a      	beq.n	80033fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d019      	beq.n	80033c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fe fb30 	bl	80019f8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe fb2c 	bl	80019f8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e160      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f000 face 	bl	800395c <RCC_Delay>
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fe fb16 	bl	80019f8 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ce:	e00f      	b.n	80033f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fe fb12 	bl	80019f8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d908      	bls.n	80033f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e146      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	42420000 	.word	0x42420000
 80033ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	4b92      	ldr	r3, [pc, #584]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e9      	bne.n	80033d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a6 	beq.w	8003556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340e:	4b8b      	ldr	r3, [pc, #556]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	4b88      	ldr	r3, [pc, #544]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a87      	ldr	r2, [pc, #540]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	61d3      	str	r3, [r2, #28]
 8003426:	4b85      	ldr	r3, [pc, #532]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b82      	ldr	r3, [pc, #520]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a7e      	ldr	r2, [pc, #504]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fe fad3 	bl	80019f8 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fe facf 	bl	80019f8 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b64      	cmp	r3, #100	; 0x64
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e103      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b75      	ldr	r3, [pc, #468]	; (8003640 <HAL_RCC_OscConfig+0x4c8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x312>
 800347c:	4b6f      	ldr	r3, [pc, #444]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a6e      	ldr	r2, [pc, #440]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e02d      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x334>
 8003492:	4b6a      	ldr	r3, [pc, #424]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a69      	ldr	r2, [pc, #420]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	4b67      	ldr	r3, [pc, #412]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a66      	ldr	r2, [pc, #408]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6213      	str	r3, [r2, #32]
 80034aa:	e01c      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d10c      	bne.n	80034ce <HAL_RCC_OscConfig+0x356>
 80034b4:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a60      	ldr	r2, [pc, #384]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	e00b      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a5a      	ldr	r2, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6213      	str	r3, [r2, #32]
 80034da:	4b58      	ldr	r3, [pc, #352]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a57      	ldr	r2, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d015      	beq.n	800351a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7fe fa83 	bl	80019f8 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe fa7f 	bl	80019f8 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0b1      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCC_OscConfig+0x37e>
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fe fa6d 	bl	80019f8 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe fa69 	bl	80019f8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e09b      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b3c      	ldr	r3, [pc, #240]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4a3b      	ldr	r2, [pc, #236]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8087 	beq.w	800366e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003560:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d061      	beq.n	8003630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d146      	bne.n	8003602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fa3d 	bl	80019f8 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe fa39 	bl	80019f8 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e06d      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d108      	bne.n	80035bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035aa:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4921      	ldr	r1, [pc, #132]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a19      	ldr	r1, [r3, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	430b      	orrs	r3, r1
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fe fa0d 	bl	80019f8 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fa09 	bl	80019f8 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e03d      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x46a>
 8003600:	e035      	b.n	800366e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x4cc>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe f9f6 	bl	80019f8 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe f9f2 	bl	80019f8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e026      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x4c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x498>
 800362e:	e01e      	b.n	800366e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e019      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
 800363c:	40021000 	.word	0x40021000
 8003640:	40007000 	.word	0x40007000
 8003644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_OscConfig+0x500>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	429a      	cmp	r2, r3
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0d0      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b6a      	ldr	r3, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d910      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 0207 	bic.w	r2, r3, #7
 80036a6:	4965      	ldr	r1, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d040      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d115      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e073      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3d      	ldr	r3, [pc, #244]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7fe f944 	bl	80019f8 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7fe f940 	bl	80019f8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e053      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2d      	ldr	r3, [pc, #180]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d210      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4922      	ldr	r1, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f821 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1cc>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1d0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe f8a2 	bl	8001974 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40022000 	.word	0x40022000
 8003840:	40021000 	.word	0x40021000
 8003844:	08005238 	.word	0x08005238
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b04      	cmp	r3, #4
 8003878:	d002      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0x30>
 800387a:	2b08      	cmp	r3, #8
 800387c:	d003      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x36>
 800387e:	e027      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003882:	613b      	str	r3, [r7, #16]
      break;
 8003884:	e027      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0c9b      	lsrs	r3, r3, #18
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8003890:	5cd3      	ldrb	r3, [r2, r3]
 8003892:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d010      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	0c5b      	lsrs	r3, r3, #17
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	4a11      	ldr	r2, [pc, #68]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038b2:	fb03 f202 	mul.w	r2, r3, r2
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e004      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	613b      	str	r3, [r7, #16]
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038d2:	613b      	str	r3, [r7, #16]
      break;
 80038d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d6:	693b      	ldr	r3, [r7, #16]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	007a1200 	.word	0x007a1200
 80038ec:	08005250 	.word	0x08005250
 80038f0:	08005260 	.word	0x08005260
 80038f4:	003d0900 	.word	0x003d0900

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <HAL_RCC_GetHCLKFreq+0x10>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	20000000 	.word	0x20000000

0800390c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003910:	f7ff fff2 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	4b05      	ldr	r3, [pc, #20]	; (800392c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	0a1b      	lsrs	r3, r3, #8
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	4903      	ldr	r1, [pc, #12]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003922:	5ccb      	ldrb	r3, [r1, r3]
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	08005248 	.word	0x08005248

08003934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003938:	f7ff ffde 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0adb      	lsrs	r3, r3, #11
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	08005248 	.word	0x08005248

0800395c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <RCC_Delay+0x34>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <RCC_Delay+0x38>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a5b      	lsrs	r3, r3, #9
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003978:	bf00      	nop
  }
  while (Delay --);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e5a      	subs	r2, r3, #1
 800397e:	60fa      	str	r2, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f9      	bne.n	8003978 <RCC_Delay+0x1c>
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	20000000 	.word	0x20000000
 8003994:	10624dd3 	.word	0x10624dd3

08003998 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e041      	b.n	8003a2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fee2 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f000 fa74 	bl	8003ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e03a      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_TIM_Base_Start_IT+0x98>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x58>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d009      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x58>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a14      	ldr	r2, [pc, #80]	; (8003ad4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_TIM_Base_Start_IT+0x58>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b06      	cmp	r3, #6
 8003aa0:	d010      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	e007      	b.n	8003ac4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9b4 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9a7 	bl	8003e7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f9b6 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f98a 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f97d 	bl	8003e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f98c 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f960 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f953 	bl	8003e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f962 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f936 	bl	8003e8c <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f929 	bl	8003e7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f938 	bl	8003e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd fbf8 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fa7b 	bl	8004182 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8fc 	bl	8003eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0220 	mvn.w	r2, #32
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa46 	bl	8004170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_ConfigClockSource+0x1c>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e0b4      	b.n	8003e72 <HAL_TIM_ConfigClockSource+0x186>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d40:	d03e      	beq.n	8003dc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d46:	f200 8087 	bhi.w	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	f000 8086 	beq.w	8003e5e <HAL_TIM_ConfigClockSource+0x172>
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d87f      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b70      	cmp	r3, #112	; 0x70
 8003d5a:	d01a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0xa6>
 8003d5c:	2b70      	cmp	r3, #112	; 0x70
 8003d5e:	d87b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b60      	cmp	r3, #96	; 0x60
 8003d62:	d050      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0x11a>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d877      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b50      	cmp	r3, #80	; 0x50
 8003d6a:	d03c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d6c:	2b50      	cmp	r3, #80	; 0x50
 8003d6e:	d873      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d058      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x13a>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d86f      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b30      	cmp	r3, #48	; 0x30
 8003d7a:	d064      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d7c:	2b30      	cmp	r3, #48	; 0x30
 8003d7e:	d86b      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d060      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d867      	bhi.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05c      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d05a      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	e062      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	f000 f968 	bl	8004076 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
      break;
 8003dbe:	e04f      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	f000 f951 	bl	8004076 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de2:	609a      	str	r2, [r3, #8]
      break;
 8003de4:	e03c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	461a      	mov	r2, r3
 8003df4:	f000 f8c8 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2150      	movs	r1, #80	; 0x50
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 f91f 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e04:	e02c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e12:	461a      	mov	r2, r3
 8003e14:	f000 f8e6 	bl	8003fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2160      	movs	r1, #96	; 0x60
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f90f 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e24:	e01c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 f8a8 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2140      	movs	r1, #64	; 0x40
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f8ff 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e00c      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 f8f6 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003e56:	e003      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5c:	e000      	b.n	8003e60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
	...

08003ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <TIM_Base_SetConfig+0xb8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00b      	beq.n	8003ef4 <TIM_Base_SetConfig+0x30>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d007      	beq.n	8003ef4 <TIM_Base_SetConfig+0x30>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <TIM_Base_SetConfig+0xbc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <TIM_Base_SetConfig+0x30>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a25      	ldr	r2, [pc, #148]	; (8003f84 <TIM_Base_SetConfig+0xc0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <TIM_Base_SetConfig+0xb8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0x62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0x62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <TIM_Base_SetConfig+0xbc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0x62>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <TIM_Base_SetConfig+0xc0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <TIM_Base_SetConfig+0xb8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800

08003f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	f023 0201 	bic.w	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 030a 	bic.w	r3, r3, #10
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0210 	bic.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800400e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	031b      	lsls	r3, r3, #12
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004020:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	621a      	str	r2, [r3, #32]
}
 8004038:	bf00      	nop
 800403a:	371c      	adds	r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	f043 0307 	orr.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b087      	sub	sp, #28
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
 8004082:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004090:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	021a      	lsls	r2, r3, #8
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4313      	orrs	r3, r2
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e046      	b.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d009      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a12      	ldr	r2, [pc, #72]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e042      	b.n	800422c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fb08 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fcd5 	bl	8004b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	d112      	bne.n	8004274 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_UART_Receive_IT+0x26>
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e00b      	b.n	8004276 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	461a      	mov	r2, r3
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fab7 	bl	80047de <UART_Start_Receive_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	e000      	b.n	8004276 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0ba      	sub	sp, #232	; 0xe8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_UART_IRQHandler+0x66>
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb93 	bl	8004a0a <UART_Receive_IT>
      return;
 80042e4:	e25b      	b.n	800479e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80de 	beq.w	80044ac <HAL_UART_IRQHandler+0x22c>
 80042f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80d1 	beq.w	80044ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00b      	beq.n	800432e <HAL_UART_IRQHandler+0xae>
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <HAL_UART_IRQHandler+0xd2>
 800433a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f043 0202 	orr.w	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <HAL_UART_IRQHandler+0xf6>
 800435e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f043 0204 	orr.w	r2, r3, #4
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d011      	beq.n	80043a6 <HAL_UART_IRQHandler+0x126>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f043 0208 	orr.w	r2, r3, #8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 81f2 	beq.w	8004794 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_UART_IRQHandler+0x14e>
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fb1e 	bl	8004a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_UART_IRQHandler+0x17a>
 80043f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d04f      	beq.n	800449a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fa28 	bl	8004850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d041      	beq.n	8004492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3314      	adds	r3, #20
 8004414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800443a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800443e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1d9      	bne.n	800440e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d013      	beq.n	800448a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	4a7e      	ldr	r2, [pc, #504]	; (8004660 <HAL_UART_IRQHandler+0x3e0>)
 8004468:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	4618      	mov	r0, r3
 8004470:	f7fd fc14 	bl	8001c9c <HAL_DMA_Abort_IT>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004484:	4610      	mov	r0, r2
 8004486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e00e      	b.n	80044a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f993 	bl	80047b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	e00a      	b.n	80044a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f98f 	bl	80047b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	e006      	b.n	80044a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f98b 	bl	80047b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80044a6:	e175      	b.n	8004794 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	bf00      	nop
    return;
 80044aa:	e173      	b.n	8004794 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	f040 814f 	bne.w	8004754 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8148 	beq.w	8004754 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8141 	beq.w	8004754 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80b6 	beq.w	8004664 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8145 	beq.w	8004798 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004516:	429a      	cmp	r2, r3
 8004518:	f080 813e 	bcs.w	8004798 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b20      	cmp	r3, #32
 800452c:	f000 8088 	beq.w	8004640 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004546:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800454a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800455c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004560:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004568:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1d9      	bne.n	8004530 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800458c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3314      	adds	r3, #20
 800459c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e1      	bne.n	800457c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3314      	adds	r3, #20
 80045be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e3      	bne.n	80045b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800460e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004610:	f023 0310 	bic.w	r3, r3, #16
 8004614:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004622:	65ba      	str	r2, [r7, #88]	; 0x58
 8004624:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e3      	bne.n	80045fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd faf3 	bl	8001c26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800464e:	b29b      	uxth	r3, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8b6 	bl	80047c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800465c:	e09c      	b.n	8004798 <HAL_UART_IRQHandler+0x518>
 800465e:	bf00      	nop
 8004660:	08004915 	.word	0x08004915
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800466c:	b29b      	uxth	r3, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 808e 	beq.w	800479c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004680:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8089 	beq.w	800479c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	330c      	adds	r3, #12
 80046aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046ae:	647a      	str	r2, [r7, #68]	; 0x44
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e3      	bne.n	800468a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3314      	adds	r3, #20
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	623b      	str	r3, [r7, #32]
   return(result);
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3314      	adds	r3, #20
 80046e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046e6:	633a      	str	r2, [r7, #48]	; 0x30
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	e841 2300 	strex	r3, r2, [r1]
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1e3      	bne.n	80046c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	330c      	adds	r3, #12
 800470e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	60fb      	str	r3, [r7, #12]
   return(result);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0310 	bic.w	r3, r3, #16
 800471e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800472c:	61fa      	str	r2, [r7, #28]
 800472e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	69b9      	ldr	r1, [r7, #24]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	617b      	str	r3, [r7, #20]
   return(result);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e3      	bne.n	8004708 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f83b 	bl	80047c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004752:	e023      	b.n	800479c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_UART_IRQHandler+0x4f4>
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8e5 	bl	800493c <UART_Transmit_IT>
    return;
 8004772:	e014      	b.n	800479e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <HAL_UART_IRQHandler+0x51e>
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f924 	bl	80049da <UART_EndTransmit_IT>
    return;
 8004792:	e004      	b.n	800479e <HAL_UART_IRQHandler+0x51e>
    return;
 8004794:	bf00      	nop
 8004796:	e002      	b.n	800479e <HAL_UART_IRQHandler+0x51e>
      return;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <HAL_UART_IRQHandler+0x51e>
      return;
 800479c:	bf00      	nop
  }
}
 800479e:	37e8      	adds	r7, #232	; 0xe8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2222      	movs	r2, #34	; 0x22
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004822:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0220 	orr.w	r2, r2, #32
 8004842:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004850:	b480      	push	{r7}
 8004852:	b095      	sub	sp, #84	; 0x54
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004878:	643a      	str	r2, [r7, #64]	; 0x40
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800487e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e5      	bne.n	8004858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3314      	adds	r3, #20
 8004892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	61fb      	str	r3, [r7, #28]
   return(result);
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3314      	adds	r3, #20
 80048aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d119      	bne.n	80048fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e8:	61ba      	str	r2, [r7, #24]
 80048ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6979      	ldr	r1, [r7, #20]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	613b      	str	r3, [r7, #16]
   return(result);
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800490a:	bf00      	nop
 800490c:	3754      	adds	r7, #84	; 0x54
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7ff ff41 	bl	80047b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b21      	cmp	r3, #33	; 0x21
 800494e:	d13e      	bne.n	80049ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004958:	d114      	bne.n	8004984 <UART_Transmit_IT+0x48>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d110      	bne.n	8004984 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	461a      	mov	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004976:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	621a      	str	r2, [r3, #32]
 8004982:	e008      	b.n	8004996 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	1c59      	adds	r1, r3, #1
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6211      	str	r1, [r2, #32]
 800498e:	781a      	ldrb	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29b      	uxth	r3, r3
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4619      	mov	r1, r3
 80049a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
  }
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fed2 	bl	80047a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b08c      	sub	sp, #48	; 0x30
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b22      	cmp	r3, #34	; 0x22
 8004a1c:	f040 80ae 	bne.w	8004b7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a28:	d117      	bne.n	8004a5a <UART_Receive_IT+0x50>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d113      	bne.n	8004a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
 8004a58:	e026      	b.n	8004aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d007      	beq.n	8004a7e <UART_Receive_IT+0x74>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <UART_Receive_IT+0x82>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e008      	b.n	8004a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d15d      	bne.n	8004b78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0220 	bic.w	r2, r2, #32
 8004aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d135      	bne.n	8004b6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	613b      	str	r3, [r7, #16]
   return(result);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	623a      	str	r2, [r7, #32]
 8004b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	69f9      	ldr	r1, [r7, #28]
 8004b2e:	6a3a      	ldr	r2, [r7, #32]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e5      	bne.n	8004b08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0310 	and.w	r3, r3, #16
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d10a      	bne.n	8004b60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fe2e 	bl	80047c8 <HAL_UARTEx_RxEventCallback>
 8004b6c:	e002      	b.n	8004b74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fd66 	bl	8001640 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e002      	b.n	8004b7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3730      	adds	r7, #48	; 0x30
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bc2:	f023 030c 	bic.w	r3, r3, #12
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <UART_SetConfig+0x114>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe fea0 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	e002      	b.n	8004bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f7fe fe88 	bl	800390c <HAL_RCC_GetPCLK1Freq>
 8004bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009a      	lsls	r2, r3, #2
 8004c08:	441a      	add	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <UART_SetConfig+0x118>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	0119      	lsls	r1, r3, #4
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	009a      	lsls	r2, r3, #2
 8004c28:	441a      	add	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <UART_SetConfig+0x118>)
 8004c36:	fba3 0302 	umull	r0, r3, r3, r2
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2064      	movs	r0, #100	; 0x64
 8004c3e:	fb00 f303 	mul.w	r3, r0, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	3332      	adds	r3, #50	; 0x32
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <UART_SetConfig+0x118>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c54:	4419      	add	r1, r3
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009a      	lsls	r2, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <UART_SetConfig+0x118>)
 8004c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2064      	movs	r0, #100	; 0x64
 8004c76:	fb00 f303 	mul.w	r3, r0, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <UART_SetConfig+0x118>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	440a      	add	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40013800 	.word	0x40013800
 8004ca0:	51eb851f 	.word	0x51eb851f

08004ca4 <memset>:
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4402      	add	r2, r0
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d100      	bne.n	8004cae <memset+0xa>
 8004cac:	4770      	bx	lr
 8004cae:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb2:	e7f9      	b.n	8004ca8 <memset+0x4>

08004cb4 <__errno>:
 8004cb4:	4b01      	ldr	r3, [pc, #4]	; (8004cbc <__errno+0x8>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000058 	.word	0x20000058

08004cc0 <__libc_init_array>:
 8004cc0:	b570      	push	{r4, r5, r6, lr}
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	4d0c      	ldr	r5, [pc, #48]	; (8004cf8 <__libc_init_array+0x38>)
 8004cc6:	4c0d      	ldr	r4, [pc, #52]	; (8004cfc <__libc_init_array+0x3c>)
 8004cc8:	1b64      	subs	r4, r4, r5
 8004cca:	10a4      	asrs	r4, r4, #2
 8004ccc:	42a6      	cmp	r6, r4
 8004cce:	d109      	bne.n	8004ce4 <__libc_init_array+0x24>
 8004cd0:	f000 faa4 	bl	800521c <_init>
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	4d0a      	ldr	r5, [pc, #40]	; (8004d00 <__libc_init_array+0x40>)
 8004cd8:	4c0a      	ldr	r4, [pc, #40]	; (8004d04 <__libc_init_array+0x44>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	42a6      	cmp	r6, r4
 8004ce0:	d105      	bne.n	8004cee <__libc_init_array+0x2e>
 8004ce2:	bd70      	pop	{r4, r5, r6, pc}
 8004ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce8:	4798      	blx	r3
 8004cea:	3601      	adds	r6, #1
 8004cec:	e7ee      	b.n	8004ccc <__libc_init_array+0xc>
 8004cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf2:	4798      	blx	r3
 8004cf4:	3601      	adds	r6, #1
 8004cf6:	e7f2      	b.n	8004cde <__libc_init_array+0x1e>
 8004cf8:	080052a8 	.word	0x080052a8
 8004cfc:	080052a8 	.word	0x080052a8
 8004d00:	080052a8 	.word	0x080052a8
 8004d04:	080052ac 	.word	0x080052ac

08004d08 <sqrt>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	460f      	mov	r7, r1
 8004d0e:	f000 f9ad 	bl	800506c <__ieee754_sqrt>
 8004d12:	4632      	mov	r2, r6
 8004d14:	4604      	mov	r4, r0
 8004d16:	460d      	mov	r5, r1
 8004d18:	463b      	mov	r3, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	4639      	mov	r1, r7
 8004d1e:	f7fb ff21 	bl	8000b64 <__aeabi_dcmpun>
 8004d22:	b990      	cbnz	r0, 8004d4a <sqrt+0x42>
 8004d24:	2200      	movs	r2, #0
 8004d26:	2300      	movs	r3, #0
 8004d28:	4630      	mov	r0, r6
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	f7fb fef2 	bl	8000b14 <__aeabi_dcmplt>
 8004d30:	b158      	cbz	r0, 8004d4a <sqrt+0x42>
 8004d32:	f7ff ffbf 	bl	8004cb4 <__errno>
 8004d36:	2321      	movs	r3, #33	; 0x21
 8004d38:	2200      	movs	r2, #0
 8004d3a:	6003      	str	r3, [r0, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	f7fb fd9f 	bl	8000884 <__aeabi_ddiv>
 8004d46:	4604      	mov	r4, r0
 8004d48:	460d      	mov	r5, r1
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d50 <atan>:
 8004d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	4bb6      	ldr	r3, [pc, #728]	; (8005030 <atan+0x2e0>)
 8004d56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004d5a:	429e      	cmp	r6, r3
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	460d      	mov	r5, r1
 8004d60:	468b      	mov	fp, r1
 8004d62:	dd17      	ble.n	8004d94 <atan+0x44>
 8004d64:	4bb3      	ldr	r3, [pc, #716]	; (8005034 <atan+0x2e4>)
 8004d66:	429e      	cmp	r6, r3
 8004d68:	dc01      	bgt.n	8004d6e <atan+0x1e>
 8004d6a:	d109      	bne.n	8004d80 <atan+0x30>
 8004d6c:	b140      	cbz	r0, 8004d80 <atan+0x30>
 8004d6e:	4622      	mov	r2, r4
 8004d70:	462b      	mov	r3, r5
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	f7fb faa5 	bl	80002c4 <__adddf3>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	e005      	b.n	8004d8c <atan+0x3c>
 8004d80:	f1bb 0f00 	cmp.w	fp, #0
 8004d84:	4cac      	ldr	r4, [pc, #688]	; (8005038 <atan+0x2e8>)
 8004d86:	f300 8121 	bgt.w	8004fcc <atan+0x27c>
 8004d8a:	4dac      	ldr	r5, [pc, #688]	; (800503c <atan+0x2ec>)
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d94:	4baa      	ldr	r3, [pc, #680]	; (8005040 <atan+0x2f0>)
 8004d96:	429e      	cmp	r6, r3
 8004d98:	dc11      	bgt.n	8004dbe <atan+0x6e>
 8004d9a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004d9e:	429e      	cmp	r6, r3
 8004da0:	dc0a      	bgt.n	8004db8 <atan+0x68>
 8004da2:	a38b      	add	r3, pc, #556	; (adr r3, 8004fd0 <atan+0x280>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fa8c 	bl	80002c4 <__adddf3>
 8004dac:	2200      	movs	r2, #0
 8004dae:	4ba5      	ldr	r3, [pc, #660]	; (8005044 <atan+0x2f4>)
 8004db0:	f7fb fece 	bl	8000b50 <__aeabi_dcmpgt>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d1e9      	bne.n	8004d8c <atan+0x3c>
 8004db8:	f04f 3aff 	mov.w	sl, #4294967295
 8004dbc:	e027      	b.n	8004e0e <atan+0xbe>
 8004dbe:	f000 f951 	bl	8005064 <fabs>
 8004dc2:	4ba1      	ldr	r3, [pc, #644]	; (8005048 <atan+0x2f8>)
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	429e      	cmp	r6, r3
 8004dc8:	460d      	mov	r5, r1
 8004dca:	f300 80b8 	bgt.w	8004f3e <atan+0x1ee>
 8004dce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004dd2:	429e      	cmp	r6, r3
 8004dd4:	f300 809c 	bgt.w	8004f10 <atan+0x1c0>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f7fb fa72 	bl	80002c4 <__adddf3>
 8004de0:	2200      	movs	r2, #0
 8004de2:	4b98      	ldr	r3, [pc, #608]	; (8005044 <atan+0x2f4>)
 8004de4:	f7fb fa6c 	bl	80002c0 <__aeabi_dsub>
 8004de8:	2200      	movs	r2, #0
 8004dea:	4606      	mov	r6, r0
 8004dec:	460f      	mov	r7, r1
 8004dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb fa65 	bl	80002c4 <__adddf3>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4630      	mov	r0, r6
 8004e00:	4639      	mov	r1, r7
 8004e02:	f7fb fd3f 	bl	8000884 <__aeabi_ddiv>
 8004e06:	f04f 0a00 	mov.w	sl, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	460d      	mov	r5, r1
 8004e0e:	4622      	mov	r2, r4
 8004e10:	462b      	mov	r3, r5
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb fc0b 	bl	8000630 <__aeabi_dmul>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4680      	mov	r8, r0
 8004e20:	4689      	mov	r9, r1
 8004e22:	f7fb fc05 	bl	8000630 <__aeabi_dmul>
 8004e26:	a36c      	add	r3, pc, #432	; (adr r3, 8004fd8 <atan+0x288>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	460f      	mov	r7, r1
 8004e30:	f7fb fbfe 	bl	8000630 <__aeabi_dmul>
 8004e34:	a36a      	add	r3, pc, #424	; (adr r3, 8004fe0 <atan+0x290>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	f7fb fa43 	bl	80002c4 <__adddf3>
 8004e3e:	4632      	mov	r2, r6
 8004e40:	463b      	mov	r3, r7
 8004e42:	f7fb fbf5 	bl	8000630 <__aeabi_dmul>
 8004e46:	a368      	add	r3, pc, #416	; (adr r3, 8004fe8 <atan+0x298>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb fa3a 	bl	80002c4 <__adddf3>
 8004e50:	4632      	mov	r2, r6
 8004e52:	463b      	mov	r3, r7
 8004e54:	f7fb fbec 	bl	8000630 <__aeabi_dmul>
 8004e58:	a365      	add	r3, pc, #404	; (adr r3, 8004ff0 <atan+0x2a0>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb fa31 	bl	80002c4 <__adddf3>
 8004e62:	4632      	mov	r2, r6
 8004e64:	463b      	mov	r3, r7
 8004e66:	f7fb fbe3 	bl	8000630 <__aeabi_dmul>
 8004e6a:	a363      	add	r3, pc, #396	; (adr r3, 8004ff8 <atan+0x2a8>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb fa28 	bl	80002c4 <__adddf3>
 8004e74:	4632      	mov	r2, r6
 8004e76:	463b      	mov	r3, r7
 8004e78:	f7fb fbda 	bl	8000630 <__aeabi_dmul>
 8004e7c:	a360      	add	r3, pc, #384	; (adr r3, 8005000 <atan+0x2b0>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb fa1f 	bl	80002c4 <__adddf3>
 8004e86:	4642      	mov	r2, r8
 8004e88:	464b      	mov	r3, r9
 8004e8a:	f7fb fbd1 	bl	8000630 <__aeabi_dmul>
 8004e8e:	a35e      	add	r3, pc, #376	; (adr r3, 8005008 <atan+0x2b8>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	4680      	mov	r8, r0
 8004e96:	4689      	mov	r9, r1
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	f7fb fbc8 	bl	8000630 <__aeabi_dmul>
 8004ea0:	a35b      	add	r3, pc, #364	; (adr r3, 8005010 <atan+0x2c0>)
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	f7fb fa0b 	bl	80002c0 <__aeabi_dsub>
 8004eaa:	4632      	mov	r2, r6
 8004eac:	463b      	mov	r3, r7
 8004eae:	f7fb fbbf 	bl	8000630 <__aeabi_dmul>
 8004eb2:	a359      	add	r3, pc, #356	; (adr r3, 8005018 <atan+0x2c8>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fa02 	bl	80002c0 <__aeabi_dsub>
 8004ebc:	4632      	mov	r2, r6
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	f7fb fbb6 	bl	8000630 <__aeabi_dmul>
 8004ec4:	a356      	add	r3, pc, #344	; (adr r3, 8005020 <atan+0x2d0>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	f7fb f9f9 	bl	80002c0 <__aeabi_dsub>
 8004ece:	4632      	mov	r2, r6
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	f7fb fbad 	bl	8000630 <__aeabi_dmul>
 8004ed6:	a354      	add	r3, pc, #336	; (adr r3, 8005028 <atan+0x2d8>)
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	f7fb f9f0 	bl	80002c0 <__aeabi_dsub>
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	f7fb fba4 	bl	8000630 <__aeabi_dmul>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4640      	mov	r0, r8
 8004eee:	4649      	mov	r1, r9
 8004ef0:	f7fb f9e8 	bl	80002c4 <__adddf3>
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	f7fb fb9a 	bl	8000630 <__aeabi_dmul>
 8004efc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	d144      	bne.n	8004f90 <atan+0x240>
 8004f06:	4620      	mov	r0, r4
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7fb f9d9 	bl	80002c0 <__aeabi_dsub>
 8004f0e:	e734      	b.n	8004d7a <atan+0x2a>
 8004f10:	2200      	movs	r2, #0
 8004f12:	4b4c      	ldr	r3, [pc, #304]	; (8005044 <atan+0x2f4>)
 8004f14:	f7fb f9d4 	bl	80002c0 <__aeabi_dsub>
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	460f      	mov	r7, r1
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	4b48      	ldr	r3, [pc, #288]	; (8005044 <atan+0x2f4>)
 8004f24:	f7fb f9ce 	bl	80002c4 <__adddf3>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	4639      	mov	r1, r7
 8004f30:	f7fb fca8 	bl	8000884 <__aeabi_ddiv>
 8004f34:	f04f 0a01 	mov.w	sl, #1
 8004f38:	4604      	mov	r4, r0
 8004f3a:	460d      	mov	r5, r1
 8004f3c:	e767      	b.n	8004e0e <atan+0xbe>
 8004f3e:	4b43      	ldr	r3, [pc, #268]	; (800504c <atan+0x2fc>)
 8004f40:	429e      	cmp	r6, r3
 8004f42:	da1a      	bge.n	8004f7a <atan+0x22a>
 8004f44:	2200      	movs	r2, #0
 8004f46:	4b42      	ldr	r3, [pc, #264]	; (8005050 <atan+0x300>)
 8004f48:	f7fb f9ba 	bl	80002c0 <__aeabi_dsub>
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	4606      	mov	r6, r0
 8004f50:	460f      	mov	r7, r1
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <atan+0x300>)
 8004f58:	f7fb fb6a 	bl	8000630 <__aeabi_dmul>
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4b39      	ldr	r3, [pc, #228]	; (8005044 <atan+0x2f4>)
 8004f60:	f7fb f9b0 	bl	80002c4 <__adddf3>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4630      	mov	r0, r6
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f7fb fc8a 	bl	8000884 <__aeabi_ddiv>
 8004f70:	f04f 0a02 	mov.w	sl, #2
 8004f74:	4604      	mov	r4, r0
 8004f76:	460d      	mov	r5, r1
 8004f78:	e749      	b.n	8004e0e <atan+0xbe>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	2000      	movs	r0, #0
 8004f80:	4934      	ldr	r1, [pc, #208]	; (8005054 <atan+0x304>)
 8004f82:	f7fb fc7f 	bl	8000884 <__aeabi_ddiv>
 8004f86:	f04f 0a03 	mov.w	sl, #3
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	e73e      	b.n	8004e0e <atan+0xbe>
 8004f90:	4b31      	ldr	r3, [pc, #196]	; (8005058 <atan+0x308>)
 8004f92:	4e32      	ldr	r6, [pc, #200]	; (800505c <atan+0x30c>)
 8004f94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9c:	f7fb f990 	bl	80002c0 <__aeabi_dsub>
 8004fa0:	4622      	mov	r2, r4
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	f7fb f98c 	bl	80002c0 <__aeabi_dsub>
 8004fa8:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004fb4:	f7fb f984 	bl	80002c0 <__aeabi_dsub>
 8004fb8:	f1bb 0f00 	cmp.w	fp, #0
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	f6bf aee4 	bge.w	8004d8c <atan+0x3c>
 8004fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fc8:	461d      	mov	r5, r3
 8004fca:	e6df      	b.n	8004d8c <atan+0x3c>
 8004fcc:	4d24      	ldr	r5, [pc, #144]	; (8005060 <atan+0x310>)
 8004fce:	e6dd      	b.n	8004d8c <atan+0x3c>
 8004fd0:	8800759c 	.word	0x8800759c
 8004fd4:	7e37e43c 	.word	0x7e37e43c
 8004fd8:	e322da11 	.word	0xe322da11
 8004fdc:	3f90ad3a 	.word	0x3f90ad3a
 8004fe0:	24760deb 	.word	0x24760deb
 8004fe4:	3fa97b4b 	.word	0x3fa97b4b
 8004fe8:	a0d03d51 	.word	0xa0d03d51
 8004fec:	3fb10d66 	.word	0x3fb10d66
 8004ff0:	c54c206e 	.word	0xc54c206e
 8004ff4:	3fb745cd 	.word	0x3fb745cd
 8004ff8:	920083ff 	.word	0x920083ff
 8004ffc:	3fc24924 	.word	0x3fc24924
 8005000:	5555550d 	.word	0x5555550d
 8005004:	3fd55555 	.word	0x3fd55555
 8005008:	2c6a6c2f 	.word	0x2c6a6c2f
 800500c:	bfa2b444 	.word	0xbfa2b444
 8005010:	52defd9a 	.word	0x52defd9a
 8005014:	3fadde2d 	.word	0x3fadde2d
 8005018:	af749a6d 	.word	0xaf749a6d
 800501c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005020:	fe231671 	.word	0xfe231671
 8005024:	3fbc71c6 	.word	0x3fbc71c6
 8005028:	9998ebc4 	.word	0x9998ebc4
 800502c:	3fc99999 	.word	0x3fc99999
 8005030:	440fffff 	.word	0x440fffff
 8005034:	7ff00000 	.word	0x7ff00000
 8005038:	54442d18 	.word	0x54442d18
 800503c:	bff921fb 	.word	0xbff921fb
 8005040:	3fdbffff 	.word	0x3fdbffff
 8005044:	3ff00000 	.word	0x3ff00000
 8005048:	3ff2ffff 	.word	0x3ff2ffff
 800504c:	40038000 	.word	0x40038000
 8005050:	3ff80000 	.word	0x3ff80000
 8005054:	bff00000 	.word	0xbff00000
 8005058:	08005288 	.word	0x08005288
 800505c:	08005268 	.word	0x08005268
 8005060:	3ff921fb 	.word	0x3ff921fb

08005064 <fabs>:
 8005064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005068:	4619      	mov	r1, r3
 800506a:	4770      	bx	lr

0800506c <__ieee754_sqrt>:
 800506c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005210 <__ieee754_sqrt+0x1a4>
 8005070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	ea3c 0c01 	bics.w	ip, ip, r1
 8005078:	460b      	mov	r3, r1
 800507a:	4606      	mov	r6, r0
 800507c:	460d      	mov	r5, r1
 800507e:	460a      	mov	r2, r1
 8005080:	4604      	mov	r4, r0
 8005082:	d10e      	bne.n	80050a2 <__ieee754_sqrt+0x36>
 8005084:	4602      	mov	r2, r0
 8005086:	f7fb fad3 	bl	8000630 <__aeabi_dmul>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4630      	mov	r0, r6
 8005090:	4629      	mov	r1, r5
 8005092:	f7fb f917 	bl	80002c4 <__adddf3>
 8005096:	4606      	mov	r6, r0
 8005098:	460d      	mov	r5, r1
 800509a:	4630      	mov	r0, r6
 800509c:	4629      	mov	r1, r5
 800509e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a2:	2900      	cmp	r1, #0
 80050a4:	dc0d      	bgt.n	80050c2 <__ieee754_sqrt+0x56>
 80050a6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80050aa:	ea5c 0c00 	orrs.w	ip, ip, r0
 80050ae:	d0f4      	beq.n	800509a <__ieee754_sqrt+0x2e>
 80050b0:	b139      	cbz	r1, 80050c2 <__ieee754_sqrt+0x56>
 80050b2:	4602      	mov	r2, r0
 80050b4:	f7fb f904 	bl	80002c0 <__aeabi_dsub>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	f7fb fbe2 	bl	8000884 <__aeabi_ddiv>
 80050c0:	e7e9      	b.n	8005096 <__ieee754_sqrt+0x2a>
 80050c2:	1512      	asrs	r2, r2, #20
 80050c4:	f000 8089 	beq.w	80051da <__ieee754_sqrt+0x16e>
 80050c8:	2500      	movs	r5, #0
 80050ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ce:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80050d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050d6:	07d2      	lsls	r2, r2, #31
 80050d8:	bf5c      	itt	pl
 80050da:	005b      	lslpl	r3, r3, #1
 80050dc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80050e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80050e4:	bf58      	it	pl
 80050e6:	0064      	lslpl	r4, r4, #1
 80050e8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80050ec:	0062      	lsls	r2, r4, #1
 80050ee:	2016      	movs	r0, #22
 80050f0:	4629      	mov	r1, r5
 80050f2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80050f6:	1076      	asrs	r6, r6, #1
 80050f8:	190f      	adds	r7, r1, r4
 80050fa:	429f      	cmp	r7, r3
 80050fc:	bfde      	ittt	le
 80050fe:	1bdb      	suble	r3, r3, r7
 8005100:	1939      	addle	r1, r7, r4
 8005102:	192d      	addle	r5, r5, r4
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	3801      	subs	r0, #1
 8005108:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800510c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005110:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005114:	d1f0      	bne.n	80050f8 <__ieee754_sqrt+0x8c>
 8005116:	4604      	mov	r4, r0
 8005118:	2720      	movs	r7, #32
 800511a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800511e:	428b      	cmp	r3, r1
 8005120:	eb0c 0e00 	add.w	lr, ip, r0
 8005124:	dc02      	bgt.n	800512c <__ieee754_sqrt+0xc0>
 8005126:	d113      	bne.n	8005150 <__ieee754_sqrt+0xe4>
 8005128:	4596      	cmp	lr, r2
 800512a:	d811      	bhi.n	8005150 <__ieee754_sqrt+0xe4>
 800512c:	f1be 0f00 	cmp.w	lr, #0
 8005130:	eb0e 000c 	add.w	r0, lr, ip
 8005134:	da56      	bge.n	80051e4 <__ieee754_sqrt+0x178>
 8005136:	2800      	cmp	r0, #0
 8005138:	db54      	blt.n	80051e4 <__ieee754_sqrt+0x178>
 800513a:	f101 0801 	add.w	r8, r1, #1
 800513e:	1a5b      	subs	r3, r3, r1
 8005140:	4641      	mov	r1, r8
 8005142:	4596      	cmp	lr, r2
 8005144:	bf88      	it	hi
 8005146:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800514a:	eba2 020e 	sub.w	r2, r2, lr
 800514e:	4464      	add	r4, ip
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	3f01      	subs	r7, #1
 8005154:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005158:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800515c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005160:	d1dd      	bne.n	800511e <__ieee754_sqrt+0xb2>
 8005162:	4313      	orrs	r3, r2
 8005164:	d01b      	beq.n	800519e <__ieee754_sqrt+0x132>
 8005166:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005214 <__ieee754_sqrt+0x1a8>
 800516a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005218 <__ieee754_sqrt+0x1ac>
 800516e:	e9da 0100 	ldrd	r0, r1, [sl]
 8005172:	e9db 2300 	ldrd	r2, r3, [fp]
 8005176:	f7fb f8a3 	bl	80002c0 <__aeabi_dsub>
 800517a:	e9da 8900 	ldrd	r8, r9, [sl]
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	f7fb fccf 	bl	8000b28 <__aeabi_dcmple>
 800518a:	b140      	cbz	r0, 800519e <__ieee754_sqrt+0x132>
 800518c:	e9da 0100 	ldrd	r0, r1, [sl]
 8005190:	e9db 2300 	ldrd	r2, r3, [fp]
 8005194:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005198:	d126      	bne.n	80051e8 <__ieee754_sqrt+0x17c>
 800519a:	463c      	mov	r4, r7
 800519c:	3501      	adds	r5, #1
 800519e:	106b      	asrs	r3, r5, #1
 80051a0:	0864      	lsrs	r4, r4, #1
 80051a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80051a6:	07ea      	lsls	r2, r5, #31
 80051a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80051ac:	bf48      	it	mi
 80051ae:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80051b2:	4620      	mov	r0, r4
 80051b4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80051b8:	e76d      	b.n	8005096 <__ieee754_sqrt+0x2a>
 80051ba:	0ae3      	lsrs	r3, r4, #11
 80051bc:	3915      	subs	r1, #21
 80051be:	0564      	lsls	r4, r4, #21
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0fa      	beq.n	80051ba <__ieee754_sqrt+0x14e>
 80051c4:	02d8      	lsls	r0, r3, #11
 80051c6:	d50a      	bpl.n	80051de <__ieee754_sqrt+0x172>
 80051c8:	f1c2 0020 	rsb	r0, r2, #32
 80051cc:	fa24 f000 	lsr.w	r0, r4, r0
 80051d0:	1e55      	subs	r5, r2, #1
 80051d2:	4094      	lsls	r4, r2
 80051d4:	4303      	orrs	r3, r0
 80051d6:	1b4a      	subs	r2, r1, r5
 80051d8:	e776      	b.n	80050c8 <__ieee754_sqrt+0x5c>
 80051da:	4611      	mov	r1, r2
 80051dc:	e7f0      	b.n	80051c0 <__ieee754_sqrt+0x154>
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	3201      	adds	r2, #1
 80051e2:	e7ef      	b.n	80051c4 <__ieee754_sqrt+0x158>
 80051e4:	4688      	mov	r8, r1
 80051e6:	e7aa      	b.n	800513e <__ieee754_sqrt+0xd2>
 80051e8:	f7fb f86c 	bl	80002c4 <__adddf3>
 80051ec:	e9da 8900 	ldrd	r8, r9, [sl]
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4640      	mov	r0, r8
 80051f6:	4649      	mov	r1, r9
 80051f8:	f7fb fc8c 	bl	8000b14 <__aeabi_dcmplt>
 80051fc:	b120      	cbz	r0, 8005208 <__ieee754_sqrt+0x19c>
 80051fe:	1ca1      	adds	r1, r4, #2
 8005200:	bf08      	it	eq
 8005202:	3501      	addeq	r5, #1
 8005204:	3402      	adds	r4, #2
 8005206:	e7ca      	b.n	800519e <__ieee754_sqrt+0x132>
 8005208:	3401      	adds	r4, #1
 800520a:	f024 0401 	bic.w	r4, r4, #1
 800520e:	e7c6      	b.n	800519e <__ieee754_sqrt+0x132>
 8005210:	7ff00000 	.word	0x7ff00000
 8005214:	20000060 	.word	0x20000060
 8005218:	20000068 	.word	0x20000068

0800521c <_init>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr

08005228 <_fini>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr
